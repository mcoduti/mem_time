    <canvas id="game"></canvas>
    <script>

//Dev notes

//2/16:  game receives question, processes answer.  If correct, arms bomb, if not, leaves bomb gray.  Need to add a timer
//    countdown to keep from retrying bomb right away if answered in error to avoid spam clicking.  Need to add graphics,
//    possibly animations for cells.  Need to identify what variables will be stored in game database.

//2/15 9:30:  question screen displays after activating a bomb.  Gamestate changed from "playing" to "questionOn"
//    next change mouseclick states from "playing" to "questionOn", detect which area is selected for answer, then
//    clear all related languageHelper variables prior to procking next question.



/*

function main()
{
  //instantiate tiles
  //instantiate map
  //width = 5;
  width2 = 2;
  rand =  ColorGen();  //Math.floor(Math.random() * 3);

  window.requestAnimFrame = (function(){

  return window.requestAnimationFrame

  || window.webkitRequestAnimationFrame

  || window.mozRequestAnimationFrame

  || window.oRequestAnimationFrame

  || window.msRequestAnimationFrame

  || function( callback ){ return window.setTimeout(callback, FPS);
  };
  }

  )();


  Globals.Instance.initialize
  (
    1000
  );
}

function Loop()
{
  init = requestAnimFrame(Loop);

    if(Globals.Instance.inputHelper.buttonPressed == true)
    {
      Globals.Instance.inputHelper.ReturnCell();
    }
    Globals.Instance.gameTimer.updateTimeElapsed();
    if(Globals.Instance.timeRemaining > 0 && Globals.Instance.gameState == "playing")
    {
      Globals.Instance.timeRemaining = Globals.Instance.roundTime - Math.floor(Globals.Instance.gameTimer.timeElapsed/1000);
    }
    if(Globals.Instance.timeRemaining <= 0)
    {
      Globals.Instance.gameState = "endGame";
      Globals.Instance.displayHelper.endGameMessage = "You Lose!";
    }
    if(Globals.Instance.enemy.hp <= 0)
    {
      Globals.Instance.gameState = "endGame";
      Globals.Instance.displayHelper.endGameMessage = "You Win!";
    }
    Globals.Instance.displayHelper.clear();
    //Globals.Instance.displayHelper.drawInLoop();  //KEEP FOR REFERENCE
    Globals.Instance.displayHelper.writeText();
    Globals.Instance.displayHelper.drawCells();
    Globals.Instance.displayHelper.endGame();
    Globals.Instance.displayHelper.DisplayQuestion();
    //Globals.Instance.displayHelper.graphics.drawImage(Globals.Instance.imageHelper.bomb, 10,330,21,21);
    //Globals.Instance.displayHelper.graphics.drawImage(Globals.Instance.imageHelper.coinImage, 10,330,400,100);
    //Globals.Instance.displayHelper.graphics.drawImage(Globals.Instance.imageHelper.coinImage, 0,0,44, 40, 0, 400, 40, 40 ); //img, sx, sy, sw, sh, dx, dy, dw, dh
    //Globals.Instance.imageHelper.coin.update();
    //Globals.Instance.imageHelper.coin.render();
}

function TileColor(color)
{
  this.color = color;
}

function DisplayHelper()
{
  this.width = 30;
  this.width2 = 30;
  this.canvas = document.getElementById("game");
  this.endGameMessage = "You Lose!";
}
{
  DisplayHelper.prototype.clear = function()
  {
    this.graphics.fillStyle = "White";
    this.graphics.fillRect
    (
      0, 0, 600, 600
    )
  }

  DisplayHelper.prototype.drawOnInterval = function()
  {
    Globals.Instance.displayHelper.clear();
    this.graphics.fillStyle = "LightGray";
    this.width = this.width + 1;
    this.graphics.fillRect
    (
      30,85, this.width ,30
    )

  }

  DisplayHelper.prototype.drawInLoop = function()
  {
    this.graphics.fillStyle = "LightGray";
    this.graphics.fillRect
    (
      30, 30, this.width2, 30
    )
    this.width2 = this.width2 + 1;
  }

  DisplayHelper.prototype.endGame = function()
  {
    if (Globals.Instance.gameState == "endGame")
    {
      this.graphics.globalAlpha = .95;
      this.graphics.fillStyle = "White";
      this.graphics.fillRect
      (
        55, 80, 200, 100
      )
      this.graphics.globalAlpha = 1;
      this.graphics.fillStyle = "Red";
      this.graphics.font  = 'Bold 30px Calibri';
      this.graphics.fillText(this.endGameMessage, 100, 130);
      this.graphics.fillStyle = "Black";
      this.graphics.font  = '14 px Calibri';
    }

  }

  DisplayHelper.prototype.DisplayQuestion = function()
  {
    if (Globals.Instance.gameState == "questionOn")
    {
      this.graphics.globalAlpha = .95;
      this.graphics.fillStyle = "White";
      this.graphics.fillRect
      (
        55, 55, 200, 200
      )
      this.graphics.fillStyle = "#D8D8D8";
      this.graphics.fillRect
      (
        80, 115, 150, 35
      )
      this.graphics.fillRect
      (
        80, 155, 150, 35
      )
      this.graphics.fillRect
      (
        80, 195, 150, 35
      )
      this.graphics.globalAlpha = 1;
      this.graphics.fillStyle = "Black";
      this.graphics.font  = '22px Calibri';
      this.graphics.textAlign = "center";
      this.graphics.fillText(Globals.Instance.languageHelper.question[0][0], 155, 93);
      this.graphics.fillText(Globals.Instance.languageHelper.answer0[0][0], 155, 141);
      this.graphics.fillText(Globals.Instance.languageHelper.answer1[0][0], 155, 181);
      this.graphics.fillText(Globals.Instance.languageHelper.answer2[0][0], 155, 221);
      this.graphics.fillStyle = "Black";
      this.graphics.font  = '14 px Calibri';
      this.graphics.textAlign = "left";
    }
  }

  DisplayHelper.prototype.writeText = function()
  {
    this.graphics.fillStyle = "Black";
    this.graphics.font = '14px Calibri';
    //this.graphics.fillText("Globals.Instance.gameTimer.startTime: " + Globals.Instance.gameTimer.timeElapsed, 10, 320);
    //this.graphics.fillText("Globals.Instance.enemy.hp: " + Globals.Instance.enemy.hp, 10, 335);

    //this.graphics.fillText("foreignCharacters: " + Globals.Instance.languageHelper.foreignCharacters, 10, 365);
    //this.graphics.fillText("foreignPhonetic: " + Globals.Instance.languageHelper.foreignPhonetic, 10, 380);
    //this.graphics.fillText("foreignTranslations: " + Globals.Instance.languageHelper.foreignTranslations, 10, 395);
    //this.graphics.fillText("question: " + Globals.Instance.languageHelper.question, 10, 410);
    //this.graphics.fillText("answer0: " + Globals.Instance.languageHelper.answer0, 10, 425);
    //this.graphics.fillText("answer1: " + Globals.Instance.languageHelper.answer1, 10, 440);
    //this.graphics.fillText("answer2: " + Globals.Instance.languageHelper.answer2, 10, 455);
    //this.graphics.fillText("languageArray: " + Globals.Instance.languageHelper.languageArray, 10, 470);
    //this.graphics.fillText("gameState: " + Globals.Instance.gameState, 315, 15);

    //this.graphics.fillText("mXcd: " + Globals.Instance.inputHelper.mXcd, 10, 370);
    //this.graphics.fillText("mYcd: " + Globals.Instance.inputHelper.mYcd, 10, 385);
    //this.graphics.fillText("arrayTracker: " + Globals.Instance.inputHelper.arrayTracker, 10, 370);
    //this.graphics.fillText("targetArray: " + Globals.Instance.inputHelper.targetArray, 10, 385);
    //this.graphics.fillText("timeRemaining: " + Globals.Instance.timeRemaining, 10, 400);

    //this.graphics.fillText("touchTester: " + Globals.Instance.touchTester, 10, 430);
    //this.graphics.fillText("mouseTester: " + Globals.Instance.mouseTester, 10, 445);
    //this.graphics.fillText("canvas.clientLeft: " + Globals.Instance.displayHelper.canvas.offsetLeft, 10, 430);
    //this.graphics.fillText("canvas.clientTop: " + Globals.Instance.displayHelper.canvas.offsetTop, 10, 445);
    //this.graphics.fillText("touchX: " + Globals.Instance.inputHelper.touchX, 100, 370);
    //this.graphics.fillText("touchY: " + Globals.Instance.inputHelper.touchY, 100, 385);



    //this.graphics.fillText('<%= @character.first.english_spelling %>', 0, 445);
    //this.graphics.fillText("buttonPressed: " + Globals.Instance.inputHelper.buttonPressed, 10, 490);
    //this.graphics.fillText("checkAnswerTouchCounter: " + Globals.Instance.checkAnswerTouchCounter, 10, 505);

    this.graphics.fillText("question: " + Globals.Instance.languageHelper.question, 10, 520);
    this.graphics.fillText("answer0: " + Globals.Instance.languageHelper.answer0, 10, 535);
    this.graphics.fillText("answer1: " + Globals.Instance.languageHelper.answer1, 10, 550);
    this.graphics.fillText("answer2: " + Globals.Instance.languageHelper.answer2, 10, 565);


    this.graphics.font = 'Bold 20px Calibri';
    this.graphics.fillText("Time: " + (Globals.Instance.timeRemaining), 10, 325);
    this.graphics.fillStyle = "Red";
    this.graphics.fillText("Enemy HP: " + Globals.Instance.enemy.hp, 165, 325);
    this.graphics.fillStyle = "Black";
    this.graphics.font = '14px Calibri';
    this.graphics.fillText(Globals.Instance.languageHelper.foreignCharacters[0][0], 40, 340);
    this.graphics.fillText(Globals.Instance.languageHelper.foreignPhonetic[0][0], 120, 340);
    this.graphics.fillText(Globals.Instance.languageHelper.foreignTranslations[0][0], 220, 340);
    this.graphics.fillText(Globals.Instance.languageHelper.knowledgeKeyes[0], 400, 340);

    this.graphics.fillText(Globals.Instance.languageHelper.foreignCharacters[1][0], 40, 355);
    this.graphics.fillText(Globals.Instance.languageHelper.foreignPhonetic[1][0], 120, 355);
    this.graphics.fillText(Globals.Instance.languageHelper.foreignTranslations[1][0], 220, 355);
    this.graphics.fillText(Globals.Instance.languageHelper.knowledgeKeyes[1], 400, 355);

    this.graphics.fillText(Globals.Instance.languageHelper.foreignCharacters[2][0], 40, 370);
    this.graphics.fillText(Globals.Instance.languageHelper.foreignPhonetic[2][0], 120, 370);
    this.graphics.fillText(Globals.Instance.languageHelper.foreignTranslations[2][0], 220, 370);
    this.graphics.fillText(Globals.Instance.languageHelper.knowledgeKeyes[2], 400, 370);

    this.graphics.fillText(Globals.Instance.languageHelper.foreignCharacters[3][0], 40, 385);
    this.graphics.fillText(Globals.Instance.languageHelper.foreignPhonetic[3][0], 120, 385);
    this.graphics.fillText(Globals.Instance.languageHelper.foreignTranslations[3][0], 220, 385);
    this.graphics.fillText(Globals.Instance.languageHelper.knowledgeKeyes[3], 400, 385);

    this.graphics.fillText(Globals.Instance.languageHelper.foreignCharacters[4][0], 40, 400);
    this.graphics.fillText(Globals.Instance.languageHelper.foreignPhonetic[4][0], 120, 400);
    this.graphics.fillText(Globals.Instance.languageHelper.foreignTranslations[4][0], 220, 400);
    this.graphics.fillText(Globals.Instance.languageHelper.knowledgeKeyes[4], 400, 400);

    this.graphics.fillText(Globals.Instance.inputHelper.dbAnswer, 10, 415);
    //this.graphics.fillText(Globals.Instance.)

    //this.graphics.fillText(Globals.Instance.languageHelper.foreignCharacters[5][0], 40, 415);
    //this.graphics.fillText(Globals.Instance.languageHelper.foreignPhonetic[5][0], 120, 415);
    //this.graphics.fillText(Globals.Instance.languageHelper.foreignTranslations[5][0], 220, 415);
    //this.graphics.fillText(Globals.Instance.languageHelper.knowledgeKeyes[5], 400, 415);

    this.graphics.fillText(Globals.Instance.languageHelper.knowledgeKeyes.length, 10, 430);
    this.graphics.fillText("languageHelper demo: " + Globals.Instance.languageHelper.languageHelperDemoVar, 10, 445);
    this.graphics.fillText("questionArray: " + Globals.Instance.languageHelper.questionArray, 10, 460);
    this.graphics.fillText("knowledgeAjaxKey:  " + Globals.Instance.languageHelper.knowledgeAjaxKey, 10, 475);
    this.graphics.fillText("ajaxInput: " + Globals.Instance.languageHelper.ajaxInput, 10, 490);
    this.graphics.fillText("dbAnswer: " + Globals.Instance.inputHelper.dbAnswer, 10, 505);

    //this.graphics.fillText("coin: " + Globals.Instance.imageHelper.coin.height, 10, 380);
    //this.graphics.fillText("coin: " + Globals.Instance.imageHelper.coin.frameIndex, 10, 370)
  }

  DisplayHelper.prototype.drawCells = function()
  {

    for (i = 0; i < Globals.Instance.map.tilesWide; i ++)
    {
      for(j = 0; j < Globals.Instance.map.tilesDown; j++)
      {
        this.graphics.fillStyle = Globals.Instance.map.backgroundCells[i+Globals.Instance.map.tilesWide*j].color;
        this.graphics.fillRect
        (
          Globals.Instance.map.tilesHorizOffset -4 + i * Globals.Instance.map.tilesSpacing,
          Globals.Instance.map.tilesVertOffset - 4 + j * Globals.Instance.map.tilesSpacing,
          Globals.Instance.map.tileWidth + 8 ,
          Globals.Instance.map.tileHeight + 8
        )
        this.counter++;
      }
    }

    this.counter = 0;
    for (i = 0; i < Globals.Instance.map.tilesWide; i ++)
    {
      for(j = 0; j < Globals.Instance.map.tilesDown; j++)
      {
        this.graphics.fillStyle = Globals.Instance.map.cells[i+Globals.Instance.map.tilesWide*j].color;
        this.graphics.fillRect
        (
          Globals.Instance.map.tilesHorizOffset + i * Globals.Instance.map.tilesSpacing,
          Globals.Instance.map.tilesVertOffset + j * Globals.Instance.map.tilesSpacing,
          Globals.Instance.map.tileWidth,
          Globals.Instance.map.tileHeight
        )
        this.counter++;
      }
    }
  }

  DisplayHelper.prototype.initialize = function()
  {
    this.canvas.width = 500;
    this.canvas.height = 800;
    this.tomato = "tomatoooos";
    this.graphics = this.canvas.getContext("2d");
    this.graphics.fillStyle = "LightGray";
  }

}

function Globals()
{}
{
  Globals.Instance = new Globals();

  Globals.prototype.initialize = function
  (
    millisecondsPerTimerTick
  )
  {
    this.inputHelper = new InputHelper();
    this.inputHelper.initialize();
    this.testCounter = 0;
    this.enemy = new Enemy(240);
    this.imageHelper = new ImageHelper();
    this.gameState = "playing";  // playing, questionOn, endGame
    this.touchTester = 0;
    this.mouseTester = "overwrite me!";

    this.languageHelper = new LanguageHelper();

    this.displayHelper = new DisplayHelper();
    this.displayHelper.initialize();
    this.gameTimer = new Timer();
    this.mapHeight =6;
    this.mapWidth = 6;

    this.map = new Map(this.mapWidth,this.mapHeight,39,39);
    this.timeRemaining = 120;
    this.roundTime = 120;

    this.checkAnswerTouchCounter = 0;

    //this.myVar = setInterval
    //(
    //  this.handleEventTimerTick.bind(this),
    //  millisecondsPerTimerTick
    //);

    Loop();

  }

}

function ImageHelper()
{
  this.bomb = new Image();
  this.bomb.src = 'bomb.png';
  this.coinImage = new Image();
  this.coinImage.src = "coin-sprite-animation-v2.png";
  this.canvas = document.getElementById("game");

  ImageHelper.prototype.sprite = function(options)
  {
    var that = {},
      frameIndex = 0,
      tickCount = 0,
      ticksPerFrame = options.ticksPerFrame || 0,
      numberOfFrames = options.numberOfFrames || 1;


    that.context = options.context;
    that.width = options.width;
    that.height = options.height;
    that.image = options.image;

    //that.loop = options.loop;

    that.update = function() {
      tickCount +=1;

      if (tickCount > ticksPerFrame)
      {
        tickCount = 0;
        if (frameIndex < numberOfFrames -1) {

          frameIndex += 1;
        } else {
          frameIndex = 0;
        }
      }
    };


    that.render = function () {
      that.context.drawImage(
        that.image,
        frameIndex * that.width / numberOfFrames,
        0,
        that.width / numberOfFrames,
        that.height,
        0,
        0,
        that.width / numberOfFrames,
        that.height);
    };

    return that;
  }

  this.coin = this.sprite({
    context:  this.canvas.getContext("2d"),
    width:  1000,
    height:  100,
    image:  this.coinImage,
    numberOfFrames: 10,
    ticksPerFrame: 4
  });

}

function LanguageHelper()
{
this.languageHelperDemoVar = "apple";  //holds array of question and answers
                                      //0-2, questions,3 question type, 4 answer type, 5 question db key
this.knowledgeAjaxKey = 0;
this.ajaxInput = "tomato";
this.foreignCharacters = [
  ['<%= @game_input[0] %>', 0],
  ['<%= @game_input[4] %>' , 1],
  ['<%= @game_input[8] %>' , 2],
  ['<%= @game_input[12] %>' , 3],
  ['<%= @game_input[16] %>' , 4]
];
this.foreignPhonetic = [
  ['<%= @game_input[1] %>', 0],
  ['<%= @game_input[5] %>' , 1],
  ['<%= @game_input[9] %>' , 2],
  ['<%= @game_input[13] %>' , 3],
  ['<%= @game_input[17] %>' , 4]
];
this.foreignTranslations = [
  ['<%= @game_input[2] %>', 0],
  ['<%= @game_input[6] %>' , 1],
  ['<%= @game_input[10] %>' , 2],
  ['<%= @game_input[14] %>' , 3],
  ['<%= @game_input[18] %>', 4]
];
this.knowledgeKeyes = [
  ['<%= @game_input[3] %>', 0],
  ['<%= @game_input[7] %>' , 1],
  ['<%= @game_input[11] %>' , 2],
  ['<%= @game_input[15] %>' , 3],
  ['<%= @game_input[19] %>', 4]
];
//this.ajaxInput = this.knowledgeKeyes[0][1];

this.question = [];
this.answer0 = [];
this.answer1 = [];
this.answer2 = [];
this.languageArray = [];
}
{
  LanguageHelper.prototype.returnQuestion= function()
  {
  var arrayOptions = [0, 1, 2, 3, 4
      ];
  var questionArray = [];
  var indexValueHolder = [];

  indexValueHolder = Math.floor(Math.random() * arrayOptions.length);
  questionArray.push(arrayOptions[indexValueHolder]);
  arrayOptions.splice(indexValueHolder, 1);

  indexValueHolder = Math.floor(Math.random() * arrayOptions.length);
  questionArray.push(arrayOptions[indexValueHolder]);
  arrayOptions.splice(indexValueHolder, 1);

  indexValueHolder = Math.floor(Math.random() * arrayOptions.length);
  questionArray.push(arrayOptions[indexValueHolder]);
  arrayOptions.splice(indexValueHolder, 1);

  var arrayOptions2 = [0, 1, 2];
  //var arrayOptions2 = [0, 1];

  indexValueHolder = Math.floor(Math.random() * arrayOptions2.length);
  questionArray.push(arrayOptions2[indexValueHolder]);
  arrayOptions2.splice(indexValueHolder, 1);

  indexValueHolder = Math.floor(Math.random() * arrayOptions2.length);
  questionArray.push(arrayOptions2[indexValueHolder]);
  arrayOptions2.splice(indexValueHolder, 1);

  indexValueHolder = Math.floor(Math.random() * 3);
  questionArray.push(questionArray[indexValueHolder]);
  arrayOptions2.splice(indexValueHolder, 1);

  if(questionArray[3] == "0")
  {
    this.question.push(this.foreignCharacters[questionArray[5]]);
    this.knowledgeAjaxKey = questionArray[5];
  } else if (questionArray[3] == "1") {
    this.question.push(this.foreignPhonetic[questionArray[5]]);
    this.knowledgeAjaxKey = questionArray[5];
  } else if (questionArray[3] == "2") {
    this.question.push(this.foreignTranslations[questionArray[5]]);
    this.knowledgeAjaxKey = questionArray[5];
  }

  if(questionArray[4] == "0")
  {
    this.answer0.push(this.foreignCharacters[questionArray[0]]);
    this.answer1.push(this.foreignCharacters[questionArray[1]]);
    this.answer2.push(this.foreignCharacters[questionArray[2]])
  } else if (questionArray[4] == "1" ) {
    this.answer0.push(this.foreignPhonetic[questionArray[0]]);
    this.answer1.push(this.foreignPhonetic[questionArray[1]]);
    this.answer2.push(this.foreignPhonetic[questionArray[2]])
  } else if (questionArray[4] == "2" ) {
    this.answer0.push(this.foreignTranslations[questionArray[0]]);
    this.answer1.push(this.foreignTranslations[questionArray[1]]);
    this.answer2.push(this.foreignTranslations[questionArray[2]])
  }

  //this.languageHelperDemoVar = Globals.Instance.inputHelper.targetArray;
  this.languageHelperDemoVar = questionArray;

  //question array first three items:  options for answers from array of all options
  //4th item, type of question (chinese, translation, or phonetic spelling)
  //5th item, type of answer (chinese, translation, or phonetic spelling)
  //6th item, key given to each language item imported from db to identify same-same among chinese, phonetic, and translation arrays
  //return questionArray
  }
}


function InputHelper()
{
this.buttonPressed = false;
this.testValue = false;
this.blackProcessTest = false;
this.checkingCounter = 9;
this.checkingCounter2 = 0;
this.countOfNonBlackCells = 0;
this.arithmeticChecker = "celery";
this.tileRemoverOn = false;
this.offset = "hello";
this.targetArray = [];  //2 item array:  # of items, cell # of last cell in array
this.jCounter = 0;
this.arrayTracker = []; //array of all cells of same color traced between mdown and mup
this.dbAnswer = "test";
}
{
  InputHelper.prototype.initialize = function()
  {
    this.mXcd = 0;
    this.mYcd = 0;

    this.touchX = 0;
    this.touchY = 0;

    window.addEventListener("mousedown", this.OnClick.bind(this), true);
    window.addEventListener("mouseup", this.OnRelease.bind(this), true);
    document.getElementById("game").addEventListener("mousemove", this.MouseMove.bind(this), true);

    document.addEventListener('touchmove', function(e) {
      //e.preventDefault();
      //Globals.Instance.touchTester = "kaplow";
      this.touchX = e.changedTouches[0].pageX - Globals.Instance.displayHelper.canvas.offsetLeft;
      this.touchY = e.changedTouches[0].pageY - Globals.Instance.displayHelper.canvas.offsetTop;
      //Globals.Instance.touchTester = e.changedTouches[0].pageX + " x; " +
      //e.changedTouches[0].pageY + " y";
      }.bind(this), false
    );

    document.addEventListener('touchstart', function(e){
      //e.preventDefault();
      //document.getElementById("user_email").blur();
      //document.getElementById("user_password").blur();
      this.touchX = e.changedTouches[0].pageX - Globals.Instance.displayHelper.canvas.offsetLeft;
      this.touchY = e.changedTouches[0].pageY - Globals.Instance.displayHelper.canvas.offsetTop;
      if(this.touchY > 0) {
        e.preventDefault();
      }

      Globals.Instance.touchTester = e.changedTouches[0].pageX + " x; " +
      e.changedTouches[0].pageY + " y";

    if(Globals.Instance.gameState == "playing")
    {
      this.buttonPressed = true;
      this.countOfNonBlackCells = 0;
      clearInterval(Globals.Instance.inputHelper.myVar2);
      this.tileRemoverOn = false;
    }
    if (Globals.Instance.gameState == "questionOn")  //  2/16  9:21
    {
      this.checkAnswerTouch();
    }

      //alert(e.changedTouches[0].pageX) // alert pageX coordinate of touch point
       }.bind(this), false
    );

    document.addEventListener('touchend', function(e){
      //e.preventDefault();
      this.touchX = e.changedTouches[0].pageX;
      this.touchY = e.changedTouches[0].pageY;
      //Globals.Instance.inputHelper.buttonPressed = true;
      Globals.Instance.touchTester = e.changedTouches[0].pageX + " x; " +
      e.changedTouches[0].pageY + " y";

      if(Globals.Instance.gameState == "playing")
      {
        this.buttonPressed = false;
        this.ResetBorder(this.arrayTracker);
        this.SetCellBlack(this.arrayTracker);
        this.targetArray = this.CountArray(this.arrayTracker);
        this.activateQuestionOn(this.targetArray);
        this.DestroyEffect(this.targetArray);
        this.CheckColor(this.targetArray);

        this.ClearArray(this.arrayTracker);
        this.ProcessEmpties();

        if(this.tileRemoverOn == false)
        {
          this.myVar2 = setInterval
          (
            this.timerFunction.bind(this),
            100
          )
        }
      }

      //alert(e.changedTouches[0].pageX) // alert pageX coordinate of touch point
       }.bind(this), false
    );

  }




  InputHelper.prototype.OnClick = function()
  {

      //$.ajax({
      //method: "POST",
      //url: "/save_game_data",
      //data-remote:  "TRUE",
      //data: { id: 1, attempt: 1 }
      //})


    if(Globals.Instance.gameState == "playing")
    {
      this.buttonPressed = true;
      this.countOfNonBlackCells = 0;
      clearInterval(Globals.Instance.inputHelper.myVar2);
      this.tileRemoverOn = false;
    }
    if (Globals.Instance.gameState == "questionOn")  //  2/16  9:21
    {
      this.checkAnswer();
    }

  }

  InputHelper.prototype.OnRelease = function()
  {
    if(Globals.Instance.gameState == "playing")
    {
      this.buttonPressed = false;
      this.ResetBorder(this.arrayTracker);
      this.SetCellBlack(this.arrayTracker);
      this.targetArray = this.CountArray(this.arrayTracker);
      this.activateQuestionOn(this.targetArray);
      this.DestroyEffect(this.targetArray);
      this.CheckColor(this.targetArray);

      this.ClearArray(this.arrayTracker);
      this.ProcessEmpties();

      if(this.tileRemoverOn == false)
      {
        this.myVar2 = setInterval
        (
          this.timerFunction.bind(this),
          100
        )
      }
    }
  }

  InputHelper.prototype.activateQuestionOn = function(array)  // 2/16 9:41
  {
    if(Globals.Instance.gameState == "playing")
    {
      if (array[0] == 1 && Globals.Instance.map.cells[array[1]].color == "Gray")
      {
        Globals.Instance.languageHelper.returnQuestion();
        Globals.Instance.gameState = "questionOn";
      }
    }
  }

  InputHelper.prototype.checkAnswer = function()  // 2/16 9:41
  {
    Globals.Instance.languageHelper.ajaxInput = Globals.Instance.languageHelper.knowledgeKeyes[Globals.Instance.languageHelper.knowledgeAjaxKey][0];
    if //first answer box correct
    (
      this.mXcd >= 80 &&
      this.mXcd <= 230 &&
      this.mYcd >= 115 &&
      this.mYcd <= 150 &&
      Globals.Instance.languageHelper.question[0][1] == Globals.Instance.languageHelper.answer0[0][1]
    ) {
      Globals.Instance.inputHelper.dbAnswer = 1;

  //  $.ajax({
  //    method: "POST",
  //    url: "/save_game_data",
  //data-remote:  "TRUE",
  //    data: {
  //      id: Globals.Instance.languageHelper.ajaxInput,
  //      attempt: Globals.Instance.inputHelper.dbAnswer
  //    }
  //  })

      Globals.Instance.languageHelper.question.splice(0,1);
      Globals.Instance.languageHelper.answer0.splice(0,1);
      Globals.Instance.languageHelper.answer1.splice(0,1);
      Globals.Instance.languageHelper.answer2.splice(0,1);
      Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
      Globals.Instance.gameState = "playing";
    } else if //first answer box wrong
    (
      this.mXcd >= 80 &&
      this.mXcd <= 230 &&
      this.mYcd >= 115 &&
      this.mYcd <= 150 &&
      Globals.Instance.languageHelper.question[0][1] != Globals.Instance.languageHelper.answer0[0][1]
    ) {
      Globals.Instance.inputHelper.dbAnswer = 0;
  //  $.ajax({
  //    method: "POST",
  //    url: "/save_game_data",
  //data-remote:  "TRUE",
   //   data: {
   //     id: Globals.Instance.languageHelper.ajaxInput,
   //     attempt: Globals.Instance.inputHelper.dbAnswer
   //   }
   // })

      Globals.Instance.languageHelper.question.splice(0,1);
      Globals.Instance.languageHelper.answer0.splice(0,1);
      Globals.Instance.languageHelper.answer1.splice(0,1);
      Globals.Instance.languageHelper.answer2.splice(0,1);
      //Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
      Globals.Instance.gameState = "playing";
    } else if //second answer box correct
    (
      this.mXcd >= 80 &&
      this.mXcd <= 230 &&
      this.mYcd >= 155 &&
      this.mYcd <= 190 &&
      Globals.Instance.languageHelper.question[0][1] == Globals.Instance.languageHelper.answer1[0][1]
    ) {
           Globals.Instance.inputHelper.dbAnswer = 1;
      Globals.Instance.languageHelper.question.splice(0,1);
      Globals.Instance.languageHelper.answer0.splice(0,1);
      Globals.Instance.languageHelper.answer1.splice(0,1);
      Globals.Instance.languageHelper.answer2.splice(0,1);
      Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
      Globals.Instance.gameState = "playing";
    } else if //second answer box wrong
    (
      this.mXcd >= 80 &&
      this.mXcd <= 230 &&
      this.mYcd >= 155 &&
      this.mYcd <= 190 &&
      Globals.Instance.languageHelper.question[0][1] != Globals.Instance.languageHelper.answer1[0][1]
    ) {
           Globals.Instance.inputHelper.dbAnswer = 0;
      Globals.Instance.languageHelper.question.splice(0,1);
      Globals.Instance.languageHelper.answer0.splice(0,1);
      Globals.Instance.languageHelper.answer1.splice(0,1);
      Globals.Instance.languageHelper.answer2.splice(0,1);
      //Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
      Globals.Instance.gameState = "playing";
    } else if //third answer box correct
    (
      this.mXcd >= 80 &&
      this.mXcd <= 230 &&
      this.mYcd >= 195 &&
      this.mYcd <= 220 &&
      Globals.Instance.languageHelper.question[0][1] == Globals.Instance.languageHelper.answer2[0][1]
    ) {
           Globals.Instance.inputHelper.dbAnswer = 1;
      Globals.Instance.languageHelper.question.splice(0,1);
      Globals.Instance.languageHelper.answer0.splice(0,1);
      Globals.Instance.languageHelper.answer1.splice(0,1);
      Globals.Instance.languageHelper.answer2.splice(0,1);
      Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
      Globals.Instance.gameState = "playing";
    } else if //third answer box wrong
    (
      this.mXcd >= 80 &&
      this.mXcd <= 230 &&
      this.mYcd >= 195 &&
      this.mYcd <= 220 &&
      Globals.Instance.languageHelper.question[0][1] != Globals.Instance.languageHelper.answer2[0][1]
    ) {
           Globals.Instance.inputHelper.dbAnswer = 0;
      Globals.Instance.languageHelper.question.splice(0,1);
      Globals.Instance.languageHelper.answer0.splice(0,1);
      Globals.Instance.languageHelper.answer1.splice(0,1);
      Globals.Instance.languageHelper.answer2.splice(0,1);
      //Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
      Globals.Instance.gameState = "playing";
    }
    $.ajax({
      method: "POST",
      url: "/save_game_data",
  //data-remote:  "TRUE",
      data: {
        id: Globals.Instance.languageHelper.ajaxInput,
        attempt: Globals.Instance.inputHelper.dbAnswer
      }
    })
    ///////////////////////////
  }

InputHelper.prototype.checkAnswerTouch = function()  // 2/16 9:41
  {


    if //first answer box correct
    (
      this.touchX >= 80 &&
      this.touchX <= 230 &&
      this.touchY >= 115 &&
      this.touchY <= 150 &&
      Globals.Instance.languageHelper.question[0][1] == Globals.Instance.languageHelper.answer0[0][1]
    ) {


      Globals.Instance.languageHelper.question.splice(0,1);
      Globals.Instance.languageHelper.answer0.splice(0,1);
      Globals.Instance.languageHelper.answer1.splice(0,1);
      Globals.Instance.languageHelper.answer2.splice(0,1);
      Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
      Globals.Instance.gameState = "playing";
    } else if //first answer box wrong
    (
      this.touchX >= 80 &&
      this.touchX <= 230 &&
      this.touchY >= 115 &&
      this.touchY <= 150 &&
      Globals.Instance.languageHelper.question[0][1] != Globals.Instance.languageHelper.answer0[0][1]
    ) {
      Globals.Instance.languageHelper.question.splice(0,1);
      Globals.Instance.languageHelper.answer0.splice(0,1);
      Globals.Instance.languageHelper.answer1.splice(0,1);
      Globals.Instance.languageHelper.answer2.splice(0,1);
      //Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
      Globals.Instance.gameState = "playing";
    } else if //second answer box correct
    (
      this.touchX >= 80 &&
      this.touchX <= 230 &&
      this.touchY >= 155 &&
      this.touchY <= 190 &&
      Globals.Instance.languageHelper.question[0][1] == Globals.Instance.languageHelper.answer1[0][1]
    ) {
      Globals.Instance.languageHelper.question.splice(0,1);
      Globals.Instance.languageHelper.answer0.splice(0,1);
      Globals.Instance.languageHelper.answer1.splice(0,1);
      Globals.Instance.languageHelper.answer2.splice(0,1);
      Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
      Globals.Instance.gameState = "playing";
    } else if //second answer box wrong
    (
      this.touchX >= 80 &&
      this.touchX <= 230 &&
      this.touchY >= 155 &&
      this.touchY <= 190 &&
      Globals.Instance.languageHelper.question[0][1] != Globals.Instance.languageHelper.answer1[0][1]
    ) {
      Globals.Instance.languageHelper.question.splice(0,1);
      Globals.Instance.languageHelper.answer0.splice(0,1);
      Globals.Instance.languageHelper.answer1.splice(0,1);
      Globals.Instance.languageHelper.answer2.splice(0,1);
      //Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
      Globals.Instance.gameState = "playing";
    } else if //third answer box correct
    (
      this.touchX >= 80 &&
      this.touchX <= 230 &&
      this.touchY >= 195 &&
      this.touchY <= 220 &&
      Globals.Instance.languageHelper.question[0][1] == Globals.Instance.languageHelper.answer2[0][1]
    ) {
      Globals.Instance.languageHelper.question.splice(0,1);
      Globals.Instance.languageHelper.answer0.splice(0,1);
      Globals.Instance.languageHelper.answer1.splice(0,1);
      Globals.Instance.languageHelper.answer2.splice(0,1);
      Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
      Globals.Instance.gameState = "playing";
    } else if //third answer box wrong
    (
      this.touchX >= 80 &&
      this.touchX <= 230 &&
      this.touchY >= 195 &&
      this.touchY <= 220 &&
      Globals.Instance.languageHelper.question[0][1] != Globals.Instance.languageHelper.answer2[0][1]
    ) {
      Globals.Instance.languageHelper.question.splice(0,1);
      Globals.Instance.languageHelper.answer0.splice(0,1);
      Globals.Instance.languageHelper.answer1.splice(0,1);
      Globals.Instance.languageHelper.answer2.splice(0,1);
      //Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
      Globals.Instance.gameState = "playing";
    }

    Globals.Instance.checkAnswerTouchCounter += 1;
    ///////////////////////////
  }

  InputHelper.prototype.CheckColor = function(array)
  {
    if (array[0] == 1 && Globals.Instance.map.cells[array[1]].color == "Red")
    {
      //Globals.Instance.languageHelper.returnQuestion();     // 2/15 9:29

      //Globals.Instance.gameState = "questionOn";      // 2/15 9:29



      if    // RIGHT WALL
      (
        (array[1]+1) % Globals.Instance.mapWidth == 0 &&
        array[1] > Globals.Instance.mapWidth -1 &&
        array[1] < Globals.Instance.mapWidth * Globals.Instance.mapHeight -1
      )
      {
        Globals.Instance.map.cells[array[1]-1].color = "Black";
        Globals.Instance.map.cells[array[1]].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth - 1].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth - 1].color = "Black";
        Globals.Instance.enemy.hp -= 6;
      } else if     //LEFT WALL
      (
        (array[1]+1) % Globals.Instance.mapWidth == 1 &&
        array[1] > Globals.Instance.mapWidth -1 &&
        array[1] < Globals.Instance.mapWidth * (Globals.Instance.mapHeight - 1)
      )
      {
        Globals.Instance.map.cells[array[1]+1].color = "Black";
        Globals.Instance.map.cells[array[1]].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth + 1].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth + 1].color = "Black";
        Globals.Instance.enemy.hp -= 6;
      } else if     //TOP WALL
      (
        //(array[1]+1) % Globals.Instance.mapWidth == 1 &&
        array[1] > 0 &&
        array[1] < Globals.Instance.mapWidth - 1
      )
      {
        Globals.Instance.map.cells[array[1]-1].color = "Black";
        Globals.Instance.map.cells[array[1]].color = "Black";
        Globals.Instance.map.cells[array[1]+1].color = "Black";
        //Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth].color = "Black";
        //Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth + 1].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth - 1].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth + 1].color = "Black";
        Globals.Instance.enemy.hp -= 6;
      } else if     //BOTTOM WALL
      (
        //(array[1]+1) % Globals.Instance.mapWidth == 1 &&
        array[1] > Globals.Instance.mapWidth * (Globals.Instance.mapHeight - 1) &&
        array[1] < Globals.Instance.mapWidth * (Globals.Instance.mapHeight) -1
      )
      {
        Globals.Instance.map.cells[array[1]-1].color = "Black";
        Globals.Instance.map.cells[array[1]].color = "Black";
        Globals.Instance.map.cells[array[1]+1].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth + 1].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth - 1].color = "Black";
        //Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth].color = "Black";
        //Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth - 1].color = "Black";
        //Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth + 1].color = "Black";
        Globals.Instance.enemy.hp -= 6;
      } else if     //MIDDLE
      (
        (array[1]+1) % Globals.Instance.mapWidth != 1 &&
        (array[1]+1) % Globals.Instance.mapWidth != 0 &&
        array[1] > Globals.Instance.mapWidth &&
        array[1] < Globals.Instance.mapWidth * ((Globals.Instance.mapHeight) -1)
      )
      {
        Globals.Instance.map.cells[array[1]-1].color = "Black";
        Globals.Instance.map.cells[array[1]].color = "Black";
        Globals.Instance.map.cells[array[1]+1].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth + 1].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth - 1].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth - 1].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth + 1].color = "Black";
        Globals.Instance.enemy.hp -= 9;
      } else if     //TOP LEFT CORNER
      (
        array[1] == 0
      )
      {

        Globals.Instance.map.cells[array[1]].color = "Black";
        Globals.Instance.map.cells[array[1]+1].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth + 1].color = "Black";
        Globals.Instance.enemy.hp -= 4;
      } else if     //TOP RIGHT CORNER
      (
        array[1] == Globals.Instance.map.tilesWide -1
      )
      {
        Globals.Instance.map.cells[array[1]-1].color = "Black";
        Globals.Instance.map.cells[array[1]].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth - 1].color = "Black";
        Globals.Instance.enemy.hp -= 4;
      } else if     //BOTTOM LEFT CORNER
      (
        array[1] == Globals.Instance.mapWidth * (Globals.Instance.mapHeight - 1)
      )
      {
        Globals.Instance.map.cells[array[1]].color = "Black";
        Globals.Instance.map.cells[array[1]+1].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth + 1].color = "Black";
        Globals.Instance.enemy.hp -= 4;
      } else if     //BOTTOM RIGHT CORNER
      (
        array[1] == Globals.Instance.mapWidth * (Globals.Instance.mapHeight) -1
      )
      {
        Globals.Instance.map.cells[array[1]-1].color = "Black";
        Globals.Instance.map.cells[array[1]].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth - 1].color = "Black";
        Globals.Instance.enemy.hp -= 4;
      }
      this.arithmeticChecker = (array[1]+1) % Globals.Instance.map.tilesWide; // right wall, returns 0
      this.arithmeticChecker = (array[1]+1) % Globals.Instance.map.tilesWide; // left wall, returns 1
    }
  }

  InputHelper.prototype.DestroyEffect = function(array)
  {
    if (array[0] >= 5)
    {
      Globals.Instance.map.cells[array[1]].color = "Gray";
    }
  }

  InputHelper.prototype.CountArray = function(array)  //returns length of array and value of last index
  {
    if (Globals.Instance.gameState == "playing")
    {
      return [array.length, array[array.length-1]]
    }
  }

  InputHelper.prototype.ClearArray = function(array)
  {
    for (i = array.length; i > 0; i--)
    {
      array.splice(0,1);
    }
  }

  InputHelper.prototype.ResetBorder = function(array)
  {
    for (i = 0; i < this.arrayTracker.length; i++)
    {
      Globals.Instance.map.backgroundCells[array[i]].color = "Black";
    }
  }

  InputHelper.prototype.SetCellBlack = function(array)
  {
    if(this.arrayTracker.length > 2)
    {
      for (i = 0; i < this.arrayTracker.length; i++)
      {
        Globals.Instance.map.cells[array[i]].color = "Black";
        Globals.Instance.enemy.hp--;
      }
    }
  }

  InputHelper.prototype.ReturnCell = function()
  {
//beginning pt 1
    for (k = 0; k < Globals.Instance.mapWidth; k++)
    {
      for (l = 0; l < Globals.Instance.mapHeight; l ++)
      {
        if
        (
          this.mXcd > Globals.Instance.map.tilesHorizOffset + k * Globals.Instance.map.tilesSpacing &&
          this.mXcd < Globals.Instance.map.tilesHorizOffset + Globals.Instance.map.tileWidth + k * Globals.Instance.map.tilesSpacing &&
          this.mYcd > Globals.Instance.map.tilesVertOffset + l * Globals.Instance.map.tilesSpacing &&
          this.mYcd < Globals.Instance.map.tilesVertOffset + Globals.Instance.map.tileHeight + l * Globals.Instance.map.tilesSpacing
        )
        {
        this.testValue = Globals.Instance.mapWidth*l + k;  //possible error
        //Globals.Instance.map.cells[this.testValue].color = "Black";
        //Globals.Instance.map.backgroundCells[this.testValue].color = "Red";
        if
        (
          this.arrayTracker[this.arrayTracker.length - 1] != this.testValue &&
          this.arrayTracker.length == 0
        )
        {
          this.arrayTracker.push(this.testValue);
          Globals.Instance.map.backgroundCells[this.testValue].color = "Red";
        } else if
        (
          this.arrayTracker.length != 0 &&
          this.arrayTracker[this.arrayTracker.length - 1] != this.testValue &&
          Globals.Instance.map.cells[this.arrayTracker[this.arrayTracker.length-1]].color ==
          Globals.Instance.map.cells[this.testValue].color &&
          (
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] + 1 ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] - 1 ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] - Globals.Instance.map.tilesWide ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] - Globals.Instance.map.tilesWide - 1 ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] - Globals.Instance.map.tilesWide + 1 ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] + Globals.Instance.map.tilesWide ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] + Globals.Instance.map.tilesWide - 1 ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] + Globals.Instance.map.tilesWide +1
          )
          //Globals.Instance.map.cells[0].color == Globals.Instance.map.cells[1].color

        )
        {
          this.arrayTracker.push(this.testValue);
          Globals.Instance.map.backgroundCells[this.testValue].color = "Red";
          //this.arrayTracker = Globals.Instance.map.cells[this.arrayTracker[this.arrayTracker.length-1]].color;
        }
        }
      }
    }
//beginning pt 2
    for (k = 0; k < Globals.Instance.mapWidth; k++)
    {
      for (l = 0; l < Globals.Instance.mapHeight; l ++)
      {
        if
        (
          this.touchX > Globals.Instance.map.tilesHorizOffset + k * Globals.Instance.map.tilesSpacing &&
          this.touchX < Globals.Instance.map.tilesHorizOffset + Globals.Instance.map.tileWidth + k * Globals.Instance.map.tilesSpacing &&
          this.touchY > Globals.Instance.map.tilesVertOffset + l * Globals.Instance.map.tilesSpacing &&
          this.touchY < Globals.Instance.map.tilesVertOffset + Globals.Instance.map.tileHeight + l * Globals.Instance.map.tilesSpacing
        )
        {
        this.testValue = Globals.Instance.mapWidth*l + k;
        //Globals.Instance.map.cells[this.testValue].color = "Black";
        //Globals.Instance.map.backgroundCells[this.testValue].color = "Red";
        if
        (
          this.arrayTracker[this.arrayTracker.length - 1] != this.testValue &&
          this.arrayTracker.length == 0
        )
        {
          this.arrayTracker.push(this.testValue);
          Globals.Instance.map.backgroundCells[this.testValue].color = "Red";
        } else if
        (
          this.arrayTracker.length != 0 &&
          this.arrayTracker[this.arrayTracker.length - 1] != this.testValue &&
          Globals.Instance.map.cells[this.arrayTracker[this.arrayTracker.length-1]].color ==
          Globals.Instance.map.cells[this.testValue].color &&
          (
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] + 1 ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] - 1 ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] - Globals.Instance.map.tilesWide ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] - Globals.Instance.map.tilesWide - 1 ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] - Globals.Instance.map.tilesWide + 1 ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] + Globals.Instance.map.tilesWide ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] + Globals.Instance.map.tilesWide - 1 ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] + Globals.Instance.map.tilesWide +1
          )
          //Globals.Instance.map.cells[0].color == Globals.Instance.map.cells[1].color

        )
        {
          this.arrayTracker.push(this.testValue);
          Globals.Instance.map.backgroundCells[this.testValue].color = "Red";
          //this.arrayTracker = Globals.Instance.map.cells[this.arrayTracker[this.arrayTracker.length-1]].color;
        }
        }
      }
    }
  }

  InputHelper.prototype.MouseMove = function(e){
    e = e || window.event;
    var target = e.target || e.srcElement;
    var rect = target.getBoundingClientRect();
    this.mXcd = e.clientX - rect.left;
    this.mYcd = e.clientY - rect.top;
  }

  InputHelper.prototype.timerFunction = function()
  {
    this.tileRemoverOn = true;
    this.ProcessEmpties();
  }

  InputHelper.prototype.ProcessEmpties = function()
  {
    this.blackProcessTest = true;
    MoveCells();

    function MoveCells()
    {
      //Globals.Instance.map.cells[32].color = "Black";
      for (i = 0; i < Globals.Instance.mapWidth * Globals.Instance.mapHeight; i ++)
      {
        if(Globals.Instance.map.cells[i].color == "Black")
        {
          for(j = 0; j <  1; j ++)
          {
            if(i-(j+1)*Globals.Instance.mapWidth < 0) {
            Globals.Instance.map.cells[i-j*Globals.Instance.mapWidth].color = ColorGen();
            }
            else {
            Globals.Instance.inputHelper.jCounter++;
            Globals.Instance.map.cells[i-j*Globals.Instance.mapWidth].color = Globals.Instance.map.cells[i-(j+1)*Globals.Instance.mapWidth].color;
            Globals.Instance.map.cells[i-(j+1)*Globals.Instance.mapWidth].color = "Black";
            }
          }
        }


      }
      //clearInterval(Globals.Instance.inputHelper.myVar2);   //KEEP FOR REF 12 21 2015
    }
  }

}

function Timer()
{
  this.startTime = Date.now();
  this.timeElapsed = 0;

  Timer.prototype.updateTimeElapsed = function()
  {
    this.timeElapsed = Date.now() - this.startTime;
  }
}

function Map(tilesWide, tilesDown, tileWidth, tileHeight)
{
  this.tilesWide = tilesWide;
  this.tilesDown = tilesDown;
  this.tileWidth = tileWidth;
  this.tileHeight = tileHeight;

  this.tilesVertOffset = 10;
  this.tilesHorizOffset = 10;
  this.tilesSpacing = 50;  // spacing from left most point

  this.cells = [];
  this.backgroundCells = [];

  var numberOfCells = tilesWide * tilesDown;

  for (var i = 0; i < numberOfCells; i ++)
  {
    this.cells.push(new Tile(ColorGen()));
  }
  for (var i = 0; i < numberOfCells; i ++)
  {
    this.backgroundCells.push(new Tile("Black"));
  }
}

function Tile(color)
{
  this.color = color;
}

function ColorGen()
{
  colors = ["Aqua", "Pink", "Yellow", "Orange"];
  index = Math.floor((Math.random() * colors.length));
  return(colors[index]);
}

function Enemy(hp)
{
  this.hp = hp;
}

main();

*/


function main()
{
  window.requestAnimFrame = (function(){

  return window.requestAnimationFrame

  || window.webkitRequestAnimationFrame

  || window.mozRequestAnimationFrame

  || window.oRequestAnimationFrame

  || window.msRequestAnimationFrame

  || function( callback ){ return window.setTimeout(callback, FPS);
  };
  }

  )();
  Globals.Instance.initialize
  (
    1000
  );
}

function Loop()
{
  init = requestAnimFrame(Loop);
    if(Globals.Instance.inputHelper.buttonPressed == true)
    {
      Globals.Instance.inputHelper.ReturnCell();
      Globals.Instance.inputHelper.DifferenceFromOrigin();
    }
    Globals.Instance.gameTimer.updateTimeElapsed();
    if(Globals.Instance.timeRemaining > 0 /*&& Globals.Instance.gameState == "playing"*/)
    {
      Globals.Instance.timeRemaining = Globals.Instance.roundTime - Math.floor(Globals.Instance.gameTimer.timeElapsed/1000);
    }
    if(Globals.Instance.timeRemaining <= 0)
    {
      Globals.Instance.gameState = "endGame";
      Globals.Instance.displayHelper.endGameMessage = "You Lose!";
    }
    if(Globals.Instance.enemy.hp <= 0)
    {
      Globals.Instance.gameState = "endGame";
      Globals.Instance.displayHelper.endGameMessage = "You Win!";
    }
    Globals.Instance.displayHelper.clear();
    Globals.Instance.displayHelper.writeText();
    Globals.Instance.displayHelper.drawCells();
    Globals.Instance.displayHelper.endGame();
    Globals.Instance.displayHelper.DisplayQuestion();
    Globals.Instance.displayHelper.DisplaySubmitButton();
    //Globals.Instance.displayHelper.drawCharacter();
    Globals.Instance.displayHelper.drawLineArray();

    //Globals.Instance.displayHelper.graphics.drawImage(Globals.Instance.imageHelper.bomb, 10,330,21,21);
    //Globals.Instance.displayHelper.graphics.drawImage(Globals.Instance.imageHelper.coinImage, 10,330,400,100);
    //Globals.Instance.displayHelper.graphics.drawImage(Globals.Instance.imageHelper.coinImage, 0,0,44, 40, 0, 400, 40, 40 );
      //img, sx, sy, sw, sh, dx, dy, dw, dh
    //Globals.Instance.imageHelper.coin.update();
    //Globals.Instance.imageHelper.coin.render();
}

function TileColor(color)
{
  this.color = color;
}

function DisplayHelper()
{
  this.canvas = document.getElementById("game");
  this.endGameMessage = "You Lose!";
  this.drawInput = [];
  this.testingArray = [[100, 400], [200, 420], [130, 430]];
  this.p1 = 1;
  this.p2 = 1;
  this.p3 = 1;
  this.p4 = 1;
  this.p5 = 1;
  this.p6 = 1;
  this.p7 = 1;
  this.p8 = "p8";
  this.p9 = "p9";
  this.p10 = "p10";
  this.p11 = "p11";
  this.p12 = "p12";
  this.p13 = "p13";
  this.p14 = "p14";
  this.p15 = "p15";
  this.p16 = "p16";
  this.p17 = "p17";
  this.p18 = "p18";
  this.p19 = "p19";
  this.p20 = "p20";

}
{
  //DisplayHelper.prototype.drawCharacter = function()
  //{
    //this.graphics.beginPath();
    //this.graphics.moveTo(300, 550);
    //this.graphics.lineTo(Globals.Instance.inputHelper.mXcd , Globals.Instance.inputHelper.mYcd );
    //this.graphics.lineTo(200, 400);
    //this.graphics.stroke();
  //}


  DisplayHelper.prototype.drawLineArray = function()
  {



    Globals.Instance.displayHelper.graphics.lineWidth = 5;
    Globals.Instance.displayHelper.graphics.strokeStyle = "Black";
    if(Globals.Instance.displayHelper.drawInput[0])
    {
      for (j = 0; j < Globals.Instance.displayHelper.drawInput.length; j++)
      {
        if(Globals.Instance.displayHelper.drawInput[j])
        {
          if(Globals.Instance.displayHelper.drawInput[j][0])
          {
            for (i = 0; i < Globals.Instance.displayHelper.drawInput[j][0].length; i++)
            {
              if( i == 0 )
              {
                Globals.Instance.displayHelper.graphics.moveTo(Globals.Instance.displayHelper.drawInput[j][0][i], Globals.Instance.displayHelper.drawInput[j][1][i]);
              } else {
                Globals.Instance.displayHelper.graphics.lineTo(Globals.Instance.displayHelper.drawInput[j][0][i], Globals.Instance.displayHelper.drawInput[j][1][i]);
              }
            }
          }
        }
        Globals.Instance.displayHelper.graphics.stroke();
      }
    }
    Globals.Instance.displayHelper.graphics.lineWidth = 1;
  }

  DisplayHelper.prototype.clear = function()
  {
    this.graphics.fillStyle = "White";
    this.graphics.fillRect
    (
      0, 0, 600, 800
    )
  }
  DisplayHelper.prototype.endGame = function()
  {
    if (Globals.Instance.gameState == "endGame")
    {
      this.graphics.globalAlpha = .95;
      this.graphics.fillStyle = "White";
      this.graphics.fillRect
      (
        55, 80, 200, 100
      )
      this.graphics.globalAlpha = 1;
      this.graphics.fillStyle = "Red";
      this.graphics.font  = 'Bold 30px Calibri';
      this.graphics.fillText(this.endGameMessage, 100, 130);
      this.graphics.fillStyle = "Black";
      this.graphics.font  = '14 px Calibri';
    }

  }

  DisplayHelper.prototype.wrapText = function (text, x, y, maxWidth, lineHeight) {


    var lines = text.split("\n");

      for (var i = 0; i < lines.length; i++) {


      var words = lines[i].split(' ');
      var line = '';


      for (var n = 0; n < words.length; n++) {

        var testLine = line + words[n] + ' ';

        var metrics = this.measureText(testLine);

        var testWidth = metrics.width;

        if (testWidth > maxWidth && n > 0) {

          this.fillText(line, x, y);

          line = words[n] + ' ';

          y += lineHeight;

        } else {

          line = testLine;

        }

      }


      this.fillText(line, x, y);

      y += lineHeight;

    }

  };


  DisplayHelper.prototype.DisplaySubmitButton = function()
  {
    if(Globals.Instance.languageHelper.questionArray[4] == 3) {
      this.graphics.globalAlpha = .9;
      this.graphics.fillStyle = "White";
      this.graphics.fillRect
      (
        100, 290, 115, 45
      )
      this.graphics.globalAlpha = 1;
      this.graphics.strokeStyle = "Black";
      this.graphics.lineWidth = 5;
      this.graphics.rect(100,290,115,45);
      this.graphics.stroke();

      this.graphics.font = 'Bold 18px Calibri';
      this.graphics.fillStyle = "Red";
      this.graphics.textAlign = "center";
      this.graphics.fillText("Submit", 157, 316);
      this.graphics.textAlign = "left";
      this.graphics.font = '14px Calibri';
      this.graphics.fillStyle = "Black";

    }
  }

  DisplayHelper.prototype.DisplayQuestion = function()
  {
    if (Globals.Instance.gameState == "questionOn")
    {
      this.graphics.globalAlpha = .95;
      this.graphics.fillStyle = "White";
      this.graphics.fillRect
      (
        20, 20, 265, 265
      )
      this.graphics.fillStyle = "#D8D8D8";

      if(Globals.Instance.languageHelper.questionArray[4] != 3) {
        this.graphics.fillRect
        (
          80, 115, 150, 35
        )
        this.graphics.fillRect
        (
          80, 155, 150, 35
        )
        this.graphics.fillRect
        (
          80, 195, 150, 35
        )
      }

      this.graphics.globalAlpha = 1;
      this.graphics.fillStyle = "Black";
      this.graphics.font  = '30px Calibri';
      this.graphics.textAlign = "center";
      this.graphics.fillText(Globals.Instance.languageHelper.question[0][0], 155, 93);

      if(Globals.Instance.languageHelper.questionArray[4] != 3) {
        this.graphics.fillText(Globals.Instance.languageHelper.answer0[0][0], 155, 141);
        this.graphics.fillText(Globals.Instance.languageHelper.answer1[0][0], 155, 181);
        this.graphics.fillText(Globals.Instance.languageHelper.answer2[0][0], 155, 221);
      }

      this.graphics.fillStyle = "Black";
      this.graphics.font  = '14 px Calibri';
      this.graphics.textAlign = "left";
    }
  }
  DisplayHelper.prototype.writeText = function()
  {
    this.graphics.fillStyle = "Black";
    this.graphics.font = '14px Calibri';

    //this.graphics.fillText("touchActive: " + Globals.Instance.inputHelper.touchActive, 130, 320);

    //this.graphics.fillText("p1: " + Globals.Instance.displayHelper.p1, 310, 20);
    //this.graphics.fillText("p2: " + Globals.Instance.displayHelper.p2, 310, 35);
    //this.graphics.fillText("p3: " + Globals.Instance.displayHelper.p3, 310, 50);
    //this.graphics.fillText("p4: " + Globals.Instance.displayHelper.p4, 310, 65);
    //this.graphics.fillText("p5: " + Globals.Instance.displayHelper.p5, 310, 80);
    //this.graphics.fillText("p6: " + Globals.Instance.displayHelper.p6, 310, 95);
   // this.graphics.fillText("p7: " + Globals.Instance.displayHelper.p7, 310, 110);
   // this.graphics.fillText("p8: " + Globals.Instance.displayHelper.p8, 310, 125);
   // this.graphics.fillText("p9: " + Globals.Instance.displayHelper.p9, 310, 140);
   // this.graphics.fillText("p10: " + Globals.Instance.displayHelper.p10, 310, 155);
   // this.graphics.fillText("p11: " + Globals.Instance.displayHelper.p11, 310, 170);
   // this.graphics.fillText("p12: " + Globals.Instance.displayHelper.p12, 310, 185);
   // this.graphics.fillText("p13: " + Globals.Instance.displayHelper.p13, 310, 200);
   // this.graphics.fillText("p14: " + Globals.Instance.displayHelper.p14, 310, 215);
   // this.graphics.fillText("p15: " + Globals.Instance.displayHelper.p15, 310, 230);
   // this.graphics.fillText("p16: " + Globals.Instance.displayHelper.p16, 310, 245);
   // this.graphics.fillText("p17: " + Globals.Instance.displayHelper.p17, 310, 260);
   // this.graphics.fillText("p18: " + Globals.Instance.displayHelper.p18, 310, 275);
   // this.graphics.fillText("p19: " + Globals.Instance.displayHelper.p19, 310, 290);
   // this.graphics.fillText("p20: " + Globals.Instance.displayHelper.p20, 310, 305);

    //this.graphics.fillText("Globals.Instance.gameTimer.startTime: " + Globals.Instance.gameTimer.timeElapsed, 10, 320);
    //this.graphics.fillText("Globals.Instance.enemy.hp: " + Globals.Instance.enemy.hp, 10, 335);

    //this.graphics.fillText("languageHelper demo: " + Globals.Instance.languageHelper.languageHelperDemoVar, 10, 350);
    //this.graphics.fillText("foreignCharacters: " + Globals.Instance.languageHelper.foreignCharacters, 10, 365);
    //this.graphics.fillText("foreignPhonetic: " + Globals.Instance.languageHelper.foreignPhonetic, 10, 380);
    //this.graphics.fillText("foreignTranslations: " + Globals.Instance.languageHelper.foreignTranslations, 10, 395);
    //this.graphics.fillText("question: " + Globals.Instance.languageHelper.question, 10, 410);
    //this.graphics.fillText("answer0: " + Globals.Instance.languageHelper.answer0, 10, 425);
    //this.graphics.fillText("answer1: " + Globals.Instance.languageHelper.answer1, 10, 440);
    //this.graphics.fillText("answer2: " + Globals.Instance.languageHelper.answer2, 10, 455);
    //this.graphics.fillText("languageArray: " + Globals.Instance.languageHelper.languageArray, 10, 470);
    //this.graphics.fillText("gameState: " + Globals.Instance.gameState, 315, 15);

    //this.graphics.fillText("targetArray: " + Globals.Instance.inputHelper.targetArray, 180, 410);
    //this.graphics.fillText("arrayTracker: " + Globals.Instance.inputHelper.arrayTracker, 180, 420);

    //this.graphics.fillText("timeRemaining: " + Globals.Instance.timeRemaining, 10, 400);
    //this.graphics.fillText("practiceArray: " + Globals.Instance.languageHelper.sampleInput, 10, 375);
    //this.graphics.fillText("varOutput: " + Globals.Instance.languageHelper.varOutput, 10, 360);
    //this.graphics.fillText("coin: " + Globals.Instance.imageHelper.coin.height, 10, 380);
    //this.graphics.fillText("coin: " + Globals.Instance.imageHelper.coin.frameIndex, 10, 370)
    //this.graphics.fillText("checkAnswerTouchCounter: " + Globals.Instance.checkAnswerTouchCounter, 10, 505);
    //this.graphics.fillText("question: " + Globals.Instance.languageHelper.question, 10, 520);
    //this.graphics.fillText("answer0: " + Globals.Instance.languageHelper.answer0, 10, 535);
    //this.graphics.fillText("answer1: " + Globals.Instance.languageHelper.answer1, 10, 550);
    //this.graphics.fillText("answer2: " + Globals.Instance.languageHelper.answer2, 10, 565);
    //this.graphics.fillText("canvas.clientTop: " + Globals.Instance.displayHelper.canvas.offsetTop, 10, );
    //this.graphics.fillText("offsetLanguageArrayCdTouch:  " + Globals.Instance.inputHelper.offsetLanguageArrayCdTouch, 10, 475);
    //this.graphics.fillText("offsetLanguageArrayCd:  " + Globals.Instance.inputHelper.offsetLanguageArrayCd, 10, 490);
    //this.graphics.fillText("canvas.clientLeft: " + Globals.Instance.displayHelper.canvas.offsetLeft, 10, 430);

    //this.graphics.fillText("lanXCd: " + Globals.Instance.languageHelper.languageArrayXCd, 10, 460);

    this.graphics.font = '22px Calibri';
    this.graphics.fillText(Globals.Instance.languageHelper.languageArray, Globals.Instance.languageHelper.languageArrayXCd, 360);
    //this.graphics.fillText(Globals.Instance.languageHelper.languageArray, Globals.Instance.languageHelper.languageArrayXCd + 500, 380);
    //this.graphics.fillText(Globals.Instance.languageHelper.languageArray, Globals.Instance.languageHelper.languageArrayXCd + 1000, 405);
    this.graphics.font = '14px Calibri';

    //this.graphics.fillText("questionArray: " + Globals.Instance.languageHelper.questionArray, 10, 380);

    //this.graphics.fillText("arrayCharacteristic: " + Globals.Instance.inputHelper.arrayCharacteristic.length, 10, 440);

    this.graphics.fillText("drawTarget: " + Globals.Instance.languageHelper.drawTarget, 200, 380);
   // this.graphics.fillText("drawTarget: " + typeof Globals.Instance.languageHelper.drawTarget, 200, 395);
    this.graphics.fillText("touchX: " + Globals.Instance.inputHelper.touchX, 200, 410);
    this.graphics.fillText("touchY: " + Globals.Instance.inputHelper.touchY, 200, 425);
    this.graphics.fillText("ruby: " + '<%= @sampleRuby %>', 200, 440);

    this.graphics.fillText("testDrawResult: " + Globals.Instance.inputHelper.testDrawResult, 10, 380);
    this.graphics.fillText("testDrawResult: " + typeof Globals.Instance.inputHelper.testDrawResult, 10, 395);

    this.graphics.fillText("matchIdentifier: " + Globals.Instance.languageHelper.matchIdentifier,   10, 455);
    this.graphics.fillText("sendFailRecord: " + Globals.Instance.inputHelper.sendFailRecord, 10, 470);


    if(Globals.Instance.languageHelper.question[0]) {
      this.graphics.fillText("languageHelper.question: " + Globals.Instance.languageHelper.question[0][0], 10, 425);
    }

   // this.graphics.fillText("mXcd: " + Globals.Instance.inputHelper.mXcd, 170, 350);
   // this.graphics.fillText("mYcd: " + Globals.Instance.inputHelper.mYcd, 170, 365);

  //  if(Globals.Instance.displayHelper.drawInput[0]) {
  //    this.graphics.fillText("drawInput[0][0]: " + Globals.Instance.displayHelper.drawInput[0][0], 10, 500);
   //   this.graphics.fillText("drawInput[0][1]: " + Globals.Instance.displayHelper.drawInput[0][1], 10, 530);
  //    if(Globals.Instance.displayHelper.drawInput[0][0]) {
   //     this.graphics.fillText("drawInput[0][0][0]: " + Globals.Instance.displayHelper.drawInput[0][0][0], 10, 515);
  //    }
  //  }




  //  if(Globals.Instance.displayHelper.drawInput[1]) {
   //   if(Globals.Instance.displayHelper.drawInput[1][1]) {
   //     this.graphics.fillText("drawInput[1][0]: " + Globals.Instance.displayHelper.drawInput[1][0], 10, 530);
   //     this.graphics.fillText("drawInput[1][1]: " + Globals.Instance.displayHelper.drawInput[1][1], 10, 545);
  //    }
  //  }


/*    if(Globals.Instance.displayHelper.drawInput[2]) {
      //this.graphics.fillText("drawInput[2]: " + Globals.Instance.displayHelper.drawInput[2], 10, 560);
      //if(Globals.Instance.displayHelper.drawInput[1][1]) {
        this.graphics.fillText("drawInput[2][0]: " + Globals.Instance.displayHelper.drawInput[2][0], 10, 575);
        this.graphics.fillText("drawInput[2][1]: " + Globals.Instance.displayHelper.drawInput[2][1], 10, 590);
      //}
    }

*/

    this.graphics.fillText("drawInput.length: " + Globals.Instance.displayHelper.drawInput.length, 10, 425);

  //  if(Globals.Instance.displayHelper.drawInput[0]){
  //    if(Globals.Instance.displayHelper.drawInput[0][0]){
  //      this.graphics.fillText("drawInput[0][0].length: " + Globals.Instance.displayHelper.drawInput[0][0].length, 10, 765);
   //   }
   // }

    //this.graphics.fillText("touchX: " + Globals.Instance.inputHelper.touchX, 10, 435);
    //this.graphics.fillText("touchY: " + Globals.Instance.inputHelper.touchY, 150, 435);
    //this.graphics.fillText("arrayTracker: " + Globals.Instance.inputHelper.arrayTracker, 10, 450);
 //   this.graphics.fillText("buttonPressed: " + Globals.Instance.inputHelper.buttonPressed, 10, 465);

  //  this.graphics.fillText("testingArray: " + Globals.Instance.displayHelper.testingArray[0][1], 10, 780);

    this.graphics.beginPath();


    this.graphics.font = 'Bold 18px Calibri';
    this.graphics.fillStyle = "Blue";
    this.graphics.fillText("User Power: " + Globals.Instance.user.dmg, 5, 321);
    this.graphics.fillText("Monster: " + Globals.Instance.enemy.hp, 5, 338);
    if(Globals.Instance.timeRemaining > 10)
    {
      this.graphics.fillStyle = "Blue";
    } else {
      this.graphics.fillStyle = "Red";
    }
    this.graphics.fillText("T: " + (Globals.Instance.timeRemaining), 245, 321);
    this.graphics.font = '14px Calibri';
    this.graphics.fillStyle = "Black";

  }
  DisplayHelper.prototype.drawCells = function()
  {
    //draw backgroundCells.  Offset regular cells and increase size to create black border.
    for (i = 0; i < Globals.Instance.map.tilesWide; i ++)
    {
      for(j = 0; j < Globals.Instance.map.tilesDown; j++)
      {
        this.graphics.fillStyle = Globals.Instance.map.backgroundCells[i+Globals.Instance.map.tilesWide*j].color;
        this.graphics.fillRect
        (
          Globals.Instance.map.tilesHorizOffset -4 + i * Globals.Instance.map.tilesSpacing,
          Globals.Instance.map.tilesVertOffset - 4 + j * Globals.Instance.map.tilesSpacing,
          Globals.Instance.map.tileWidth + 8 ,
          Globals.Instance.map.tileHeight + 8
        )
      }
    }
    this.counter = 0;
    for (i = 0; i < Globals.Instance.map.tilesWide; i ++)
    {
      for(j = 0; j < Globals.Instance.map.tilesDown; j++)
      {
        this.graphics.fillStyle = Globals.Instance.map.cells[i+Globals.Instance.map.tilesWide*j].color;
        this.graphics.fillRect
        (
          Globals.Instance.map.tilesHorizOffset + i * Globals.Instance.map.tilesSpacing,
          Globals.Instance.map.tilesVertOffset + j * Globals.Instance.map.tilesSpacing,
          Globals.Instance.map.tileWidth,
          Globals.Instance.map.tileHeight
        )
      }
    }
  }
  DisplayHelper.prototype.initialize = function()
  {
    this.canvas.width = 310;
    this.canvas.height = 800;
    this.tomato = "tomatoooos";
    this.graphics = this.canvas.getContext("2d");
    this.graphics.fillStyle = "LightGray";
  }
}

function Globals()
{}
{
  Globals.Instance = new Globals();
  Globals.prototype.initialize = function
  (
    millisecondsPerTimerTick
  )
  {
    this.inputHelper = new InputHelper();
    this.inputHelper.initialize();
    this.enemy = new Enemy(1000);
    this.user = new User();
    //this.imageHelper = new ImageHelper();
    this.gameState = "playing";       // options:  playing, questionOn, endGame
    this.languageHelper = new LanguageHelper();
    this.displayHelper = new DisplayHelper();
    this.displayHelper.initialize();
    this.gameTimer = new Timer();
    this.mapHeight =6;
    this.mapWidth = 6;
    this.map = new Map(this.mapWidth,this.mapHeight,39,39);
    this.timeRemaining = 120;
    this.roundTime = 120;
    this.checkAnswerTouchCounter = 0;
    Loop();
  }
}
/*
function ImageHelper()
{
  this.bomb = new Image();
  this.bomb.src = 'bomb.png';
  this.coinImage = new Image();
  this.coinImage.src = "coin-sprite-animation-v2.png";
  this.canvas = document.getElementById("game");
  ImageHelper.prototype.sprite = function(options)
  {
    var that = {},
      frameIndex = 0,
      tickCount = 0,
      ticksPerFrame = options.ticksPerFrame || 0,
      numberOfFrames = options.numberOfFrames || 1;
    that.context = options.context;
    that.width = options.width;
    that.height = options.height;
    that.image = options.image;

    //that.loop = options.loop;

    that.update = function() {
      tickCount +=1;

      if (tickCount > ticksPerFrame)
      {
        tickCount = 0;
        if (frameIndex < numberOfFrames -1) {

          frameIndex += 1;
        } else {
          frameIndex = 0;
        }
      }
    };
    that.render = function () {
      that.context.drawImage(
        that.image,
        frameIndex * that.width / numberOfFrames,
        0,
        that.width / numberOfFrames,
        that.height,
        0,
        0,
        that.width / numberOfFrames,
        that.height);
    };
    return that;
  }
  this.coin = this.sprite({
    context:  this.canvas.getContext("2d"),
    width:  1000,
    height:  100,
    image:  this.coinImage,
    numberOfFrames: 10,
    ticksPerFrame: 4
  });
}
*/
function LanguageHelper()
{
this.matchIdentifier = "default";

this.foreignCharacters = [];  //foreignCharacters is the array the game sources information from
this.characterInput = [ //characterInput is a scalable array used for receiving a variable number of items, ["character", "id #"], from SQL
  ['<%= @game_input_character[0] %>', 0],   // 1
  ['<%= @game_input_character[1] %>', 1],    // 7
  ['<%= @game_input_character[2] %>' , 2],  //4
  //['<%= @game_input_character[3] %>' , 3],   //7
  //['<%= @game_input_character[4] %>', 4]   //6
  //['<%= @game_input_character[0] %>', 5],   //9
  //['<%= @game_input_character[0] %>', 6]   // 13
];
for (i =0; i < this.characterInput.length; i++)
  {
  this.foreignCharacters.push(this.characterInput[i]);
  }
this.foreignPhonetic = [];
this.phoneticInput = [
  ['<%= @game_input_phonetic[0] %>', 0],
  ['<%= @game_input_phonetic[1] %>', 1],
  ['<%= @game_input_phonetic[2] %>', 2],
  //['<%= @game_input_phonetic[3] %>', 3],
  //['<%= @game_input_phonetic[4] %>', 4]
  //['<%= @game_input_phonetic[0] %>', 5],
  //['<%= @game_input_phonetic[0] %>', 6]
];
for (i =0; i < this.phoneticInput.length; i++)
  {
  this.foreignPhonetic.push(this.phoneticInput[i]);
  }
this.foreignTranslations = [];
this.translationInput = [
  ['<%= @game_input_translation[0] %>', 0],
  ['<%= @game_input_translation[1] %>', 1],
  ['<%= @game_input_translation[2] %>', 2],
  //['<%= @game_input_translation[3] %>', 3],
  //['<%= @game_input_translation[4] %>' , 4]
  //['<%= @game_input_translation[0] %>', 5],
  //['<%= @game_input_translation[0] %>', 6]
];
for (i =0; i < this.translationInput.length; i++)
  {
  this.foreignTranslations.push(this.translationInput[i]);
  }

this.knowledgeAjaxKey = 0;
this.ajaxInput = "tomato";

this.knowledgeKeyes = [
  ['<%= @game_input_char_id[0] %>', 0],
  ['<%= @game_input_char_id[1] %>', 1],
  ['<%= @game_input_char_id[2] %>', 2],
  //['<%= @game_input_char_id[3] %>', 3],
  //['<%= @game_input_char_id[4] %>', 4]
];

this.languageArray = "";
this.languageArray2 = "";
this.languageArray3 = "";
this.languageArrayXCd = -10;
for (i=0; i<this.characterInput.length; i++)
  {
  this.languageArray = this.languageArray + "    " + this.characterInput[i][0] + " " + this.phoneticInput[i][0] + " " + this.foreignTranslations[i][0]; //+ this.translationInput[i][0] + " ";
  //this.masterLangArray.push(this.phoneticInput[i]);
  //this.masterLangArray.push(this.translationInput[i]);
  }

/*
for (i=0; i<this.characterInput.length; i++)
  {
  this.languageArray = this.languageArray + "    " + this.characterInput[i][0] + " " + this.phoneticInput[i][0] + " "; //+ this.translationInput[i][0] + " ";
  //this.masterLangArray.push(this.phoneticInput[i]);
  //this.masterLangArray.push(this.translationInput[i]);
  }
for (i=0; i<this.characterInput.length; i++)
  {
  this.languageArray = this.languageArray + "    " + this.characterInput[i][0] + " " + this.phoneticInput[i][0] + " "; //+ this.translationInput[i][0] + " ";
  //this.masterLangArray.push(this.phoneticInput[i]);
  //this.masterLangArray.push(this.translationInput[i]);
  }

for (i=0; i<this.characterInput.length; i++)
  {
  this.languageArray2 = this.languageArray2 + "    " + this.characterInput[i][0] + " " + this.phoneticInput[i][0] + " "; //+ this.translationInput[i][0] + " ";
  //this.masterLangArray.push(this.phoneticInput[i]);
  //this.masterLangArray.push(this.translationInput[i]);
  }
for (i=0; i<this.characterInput.length; i++)
  {
  this.languageArray2 = this.languageArray2 + "    " + this.characterInput[i][0] + " " + this.phoneticInput[i][0] + " "; //+ this.translationInput[i][0] + " ";
  //this.masterLangArray.push(this.phoneticInput[i]);
  //this.masterLangArray.push(this.translationInput[i]);
  }
for (i=0; i<this.characterInput.length; i++)
  {
  this.languageArray2 = this.languageArray2 + "    " + this.characterInput[i][0] + " " + this.phoneticInput[i][0] + " "; //+ this.translationInput[i][0] + " ";
  //this.masterLangArray.push(this.phoneticInput[i]);
  //this.masterLangArray.push(this.translationInput[i]);
  }


for (i=0; i<this.characterInput.length; i++)
  {
  this.languageArray3 = this.languageArray3 + "    " + this.characterInput[i][0] + " " + this.phoneticInput[i][0] + " "; //+ this.translationInput[i][0] + " ";
  //this.masterLangArray.push(this.phoneticInput[i]);
  //this.masterLangArray.push(this.translationInput[i]);
  }
for (i=0; i<this.characterInput.length; i++)
  {
  this.languageArray3 = this.languageArray3 + "    " + this.characterInput[i][0] + " " + this.phoneticInput[i][0] + " "; //+ this.translationInput[i][0] + " ";
  //this.masterLangArray.push(this.phoneticInput[i]);
  //this.masterLangArray.push(this.translationInput[i]);
  }
for (i=0; i<this.characterInput.length; i++)
  {
  this.languageArray3 = this.languageArray3 + "    " + this.characterInput[i][0] + " " + this.phoneticInput[i][0] + " "; //+ this.translationInput[i][0] + " ";
  //this.masterLangArray.push(this.phoneticInput[i]);
  //this.masterLangArray.push(this.translationInput[i]);
  }
*/

this.question = [];
this.answer0 = [];
this.answer1 = [];
this.answer2 = [];
this.questionArray = ["tomato", "paste"];
this.drawTarget = "drawTarget";
}
{
  LanguageHelper.prototype.returnQuestion= function()
  {
  var arrayOptions = [];
  for (i = 0; i < this.characterInput.length; i++) {
    arrayOptions.push(i);
  }

  var questionArray = [];
  var indexValueHolder = [];

  indexValueHolder = Math.floor(Math.random() * arrayOptions.length);
  questionArray.push(arrayOptions[indexValueHolder]);       //add first possible question [0]
  arrayOptions.splice(indexValueHolder, 1);

  indexValueHolder = Math.floor(Math.random() * arrayOptions.length);
  questionArray.push(arrayOptions[indexValueHolder]);     //add second possible quesiton [1]
  arrayOptions.splice(indexValueHolder, 1);

  indexValueHolder = Math.floor(Math.random() * arrayOptions.length);
  questionArray.push(arrayOptions[indexValueHolder]);     //add third possible question [2]
  arrayOptions.splice(indexValueHolder, 1);

  var arrayOptions2 = [0, 1, 2];
  //var arrayOptions2 = [0, 1];

  indexValueHolder = Math.floor(Math.random() * arrayOptions2.length);
  questionArray.push(arrayOptions2[indexValueHolder]);      //identify if question will be english/phonetic/character [3]
  arrayOptions2.splice(indexValueHolder, 1);

  //add draw option to arrayOptions2
  arrayOptions2.push(3);

  indexValueHolder = Math.floor(Math.random() * arrayOptions2.length);
  questionArray.push(arrayOptions2[indexValueHolder]);      //identify if answer will be english/phonetic/character [4]
  arrayOptions2.splice(indexValueHolder, 1);

  indexValueHolder = Math.floor(Math.random() * 3);
  questionArray.push(questionArray[indexValueHolder]);      //choose question from possible answers
  arrayOptions2.splice(indexValueHolder, 1);        //push to questionArray

  if(questionArray[3] == "0")
  {
    this.question.push(this.foreignCharacters[questionArray[5]])
    this.knowledgeAjaxKey = questionArray[5];
  } else if (questionArray[3] == "1") {
    this.question.push(this.foreignPhonetic[questionArray[5]])
    this.knowledgeAjaxKey = questionArray[5];
  } else if (questionArray[3] == "2") {
    this.question.push(this.foreignTranslations[questionArray[5]])
    this.knowledgeAjaxKey = questionArray[5];
  }

  this.drawTarget = this.foreignCharacters[questionArray[5]][0];

  if(questionArray[4] == "0")
  {
    this.answer0.push(this.foreignCharacters[questionArray[0]]);
    this.answer1.push(this.foreignCharacters[questionArray[1]]);
    this.answer2.push(this.foreignCharacters[questionArray[2]])
  } else if (questionArray[4] == "1" ) {
    this.answer0.push(this.foreignPhonetic[questionArray[0]]);
    this.answer1.push(this.foreignPhonetic[questionArray[1]]);
    this.answer2.push(this.foreignPhonetic[questionArray[2]])
  } else if (questionArray[4] == "2" ) {
    this.answer0.push(this.foreignTranslations[questionArray[0]]);
    this.answer1.push(this.foreignTranslations[questionArray[1]]);
    this.answer2.push(this.foreignTranslations[questionArray[2]])
  }  else if (questionArray[4] == "3" ) {
    this.answer0.push(["Rock",1]);
    this.answer1.push(["Paper",1]);
    this.answer2.push(["Scissors",1])
  }

  this.questionArray = questionArray;
  }
}
function InputHelper()
{
this.buttonPressed = false;
this.testValue = false;
this.blackProcessTest = false;
this.checkingCounter = 9;
this.checkingCounter2 = 0;
this.countOfNonBlackCells = 0;
this.arithmeticChecker = "celery";  //actually does something, not sure what
this.tileRemoverOn = false;
this.offset = "hello";
this.targetArray = [];  //2 item array:  # of items, cell # of last cell in array
this.jCounter = 0;
this.arrayTracker = []; //array of all cells of same color traced between mdown and mup
this.offsetLanguageArrayCd = 0;
this.offsetLanguageArrayCdTouch = 0;
this.testDrawResult = "apples";
this.arrayCharacteristic = [];
this.touchActive = false;
this.dbAnswer = "test";
this.sendFailRecord = 0;

}
{
  InputHelper.prototype.initialize = function()
  {
    this.mXcd = null;
    this.mYcd = 0;
    this.touchX = 0;
    this.touchY = 0;

    window.addEventListener("mousedown", this.OnClick.bind(this), true);
    window.addEventListener("mouseup", this.OnRelease.bind(this), true);
    document.getElementById("game").addEventListener("mousemove", this.MouseMove.bind(this), true);

    document.addEventListener('touchmove', function(e) {
      //e.preventDefault();
      this.touchX = e.changedTouches[0].pageX - Globals.Instance.displayHelper.canvas.offsetLeft;
      this.touchY = e.changedTouches[0].pageY - Globals.Instance.displayHelper.canvas.offsetTop;

      if(this.buttonPressed == true && Globals.Instance.gameState == "questionOn" &&
        Globals.Instance.languageHelper.questionArray[4] == 3 &&
        this.touchY < 285) {

        Globals.Instance.displayHelper.drawInput[Globals.Instance.displayHelper.drawInput.length-1].push([])
        Globals.Instance.displayHelper.drawInput[Globals.Instance.displayHelper.drawInput.length-1][0].push([Math.floor(this.touchX)]);
        Globals.Instance.displayHelper.drawInput[Globals.Instance.displayHelper.drawInput.length-1].push([])
        Globals.Instance.displayHelper.drawInput[Globals.Instance.displayHelper.drawInput.length-1][1].push([Math.floor(this.touchY)]);
      }
      }.bind(this), false
    );

    document.addEventListener('touchstart', function(e){
      //document.getElementById("user_email").blur();
      //document.getElementById("user_password").blur();
      this.touchActive = true;
      Globals.Instance.displayHelper.drawInput.push([]); // added elephant
      this.touchX = e.changedTouches[0].pageX - Globals.Instance.displayHelper.canvas.offsetLeft;
      this.touchY = e.changedTouches[0].pageY - Globals.Instance.displayHelper.canvas.offsetTop;
      this.offsetLanguageArrayCdTouch = this.touchX - Globals.Instance.languageHelper.languageArrayXCd;
      this.offsetFromLanguageArray = this.touchX - Globals.Instance.languageHelper.languageArrayXCd;
      if((this.touchX < 300 && this.touchX > 10 && this.touchY > 0 && this.touchY < 400) ) {
        e.preventDefault();
      }


      //e.changedTouches[0].pageY + " y";

      if(Globals.Instance.gameState == "playing")
      {
        //this.offsetLanguageArrayCdTouch = this.touchX - Globals.Instance.languageHelper.languageArrayXCd;
        //this.offsetFromLanguageArray = this.mXcd - Globals.Instance.languageHelper.languageArrayXCd;
        this.buttonPressed = true;
        this.countOfNonBlackCells = 0;
        clearInterval(Globals.Instance.inputHelper.myVar2);
        this.tileRemoverOn = false;
      }
      if (Globals.Instance.gameState == "questionOn")  //  2/16  9:21
      {
        //this.offsetLanguageArrayCdTouch = this.touchX - Globals.Instance.languageHelper.languageArrayXCd;
        //this.offsetFromLanguageArray = this.mXcd - Globals.Instance.languageHelper.languageArrayXCd;
        this.checkAnswerTouch();
        this.buttonPressed = true;
      }
         }.bind(this), false
    );

    document.addEventListener('touchend', function(e){
      //e.preventDefault();
      if(Globals.Instance.displayHelper.drawInput[Globals.Instance.displayHelper.drawInput.length - 1] == false) {
        //Globals.Instance.displayHelper.drawInput[Globals.Instance.displayHelper.drawInput.length - 1] = ["apple"];
        Globals.Instance.displayHelper.drawInput.splice(Globals.Instance.displayHelper.drawInput.length - 1);
      }
      this.touchX = e.changedTouches[0].pageX;
      this.touchY = e.changedTouches[0].pageY;

      if(Globals.Instance.gameState == "playing")
      {
        this.buttonPressed = false;
        this.ResetBorder(this.arrayTracker);
        this.SetCellBlack(this.arrayTracker);
        this.targetArray = this.CountArray(this.arrayTracker);
        this.activateQuestionOn(this.targetArray);
        this.DestroyEffect(this.targetArray);
        this.CheckColor(this.targetArray);

        this.ClearArray(this.arrayTracker);
        this.ProcessEmpties();

        if(this.tileRemoverOn == false)
        {
          this.myVar2 = setInterval
          (
            this.timerFunction.bind(this),
            100
          )
        }
      }
      if(Globals.Instance.gameState == "questionOn")
      {
        this.buttonPressed = false;
      }
       }.bind(this), false
    );
  }

  InputHelper.prototype.OnClick = function()
  {
    Globals.Instance.displayHelper.drawInput.push([]);
    this.touchAcitve = false;
    this.offsetLanguageArrayCd = this.mXcd - Globals.Instance.languageHelper.languageArrayXCd;
    this.offsetFromLanguageArray = this.mXcd - Globals.Instance.languageHelper.languageArrayXCd;
    //this.checkDrawing();
    //if (this.mYcd < 10) {  //this was used for testing purposes
    //  Globals.Instance.languageHelper.matchIdentifier = "reset";
    //}

    if(Globals.Instance.gameState == "playing")
    {
      //this.offsetLanguageArrayCd = this.mXcd - Globals.Instance.languageHelper.languageArrayXCd;
      //this.offsetFromLanguageArray = this.mXcd - Globals.Instance.languageHelper.languageArrayXCd;
      this.buttonPressed = true;
      this.countOfNonBlackCells = 0;
      clearInterval(Globals.Instance.inputHelper.myVar2);
      this.tileRemoverOn = false;
    }
    if (Globals.Instance.gameState == "questionOn")  //  2/16  9:21
    {
      this.buttonPressed = true;
      //this.offsetLanguageArrayCd = this.mXcd - Globals.Instance.languageHelper.languageArrayXCd;
      //this.offsetFromLanguageArray = this.mXcd - Globals.Instance.languageHelper.languageArrayXCd;
      this.checkAnswer();
    }
  }

  InputHelper.prototype.MouseMove = function(e){
    e = e || window.event;
    var target = e.target || e.srcElement;
    var rect = target.getBoundingClientRect();
    this.mXcd = e.clientX - rect.left;
    this.mYcd = e.clientY - rect.top;
    if(this.buttonPressed == true && Globals.Instance.gameState == "questionOn" &&
      Globals.Instance.languageHelper.questionArray[4] == 3 &&
      this.mYcd < 285) {
      //Globals.Instance.displayHelper.drawInput[Globals.Instance.displayHelper.drawInput.length-1].push([Math.floor(this.mXcd),Math.floor(this.mYcd)]);
      Globals.Instance.displayHelper.drawInput[Globals.Instance.displayHelper.drawInput.length-1].push([])
      Globals.Instance.displayHelper.drawInput[Globals.Instance.displayHelper.drawInput.length-1][0].push([Math.floor(this.mXcd)]);
      Globals.Instance.displayHelper.drawInput[Globals.Instance.displayHelper.drawInput.length-1].push([])
      Globals.Instance.displayHelper.drawInput[Globals.Instance.displayHelper.drawInput.length-1][1].push([Math.floor(this.mYcd)]);


      //document.getElementById('foo').innerHTML = Globals.Instance.displayHelper.drawInput[0,0];
      //document.getElementById('foo1').innerHTML = Globals.Instance.displayHelper.drawInput[1];
      //document.getElementById('foo2').innerHTML = Globals.Instance.displayHelper.drawInput[2];
    }
  }


  InputHelper.prototype.OnRelease = function()
  {
    if(Globals.Instance.displayHelper.drawInput[Globals.Instance.displayHelper.drawInput.length - 1] == false) {
      //Globals.Instance.displayHelper.drawInput[Globals.Instance.displayHelper.drawInput.length - 1] = ["apple"];
      Globals.Instance.displayHelper.drawInput.splice(Globals.Instance.displayHelper.drawInput.length - 1);
    }


    if(Globals.Instance.gameState == "playing")
    {
      this.buttonPressed = false;
      this.ResetBorder(this.arrayTracker);
      this.SetCellBlack(this.arrayTracker);
      this.targetArray = this.CountArray(this.arrayTracker);
      this.activateQuestionOn(this.targetArray);
      this.DestroyEffect(this.targetArray);
      this.CheckColor(this.targetArray);

      this.ClearArray(this.arrayTracker);
      this.ProcessEmpties();

      if(this.tileRemoverOn == false)
      {
        this.myVar2 = setInterval
        (
          this.timerFunction.bind(this),
          100
        )
      }
    }
    if(Globals.Instance.gameState == "questionOn")
    {
      this.buttonPressed = false;
    }
  }


  InputHelper.prototype.DifferenceFromOrigin = function()
  {
    if(this.touchActive == false && this.mYcd >= 330)
    {
      Globals.Instance.languageHelper.languageArrayXCd = this.mXcd - this.offsetLanguageArrayCd;
    }
    if(this.touchActive == true && this.touchY >= 330)
    {
      Globals.Instance.languageHelper.languageArrayXCd = this.touchX - this.offsetLanguageArrayCdTouch;
    }
  }



  InputHelper.prototype.activateQuestionOn = function(array)  // 2/16 9:41
  {
    if(Globals.Instance.gameState == "playing")
    {
      if (array[0] == 1 && Globals.Instance.map.cells[array[1]].color == "Gray")
      {
        Globals.Instance.languageHelper.returnQuestion();
        Globals.Instance.gameState = "questionOn";
      }
    }
  }

  InputHelper.prototype.checkDrawing = function()
  {
    if (Globals.Instance.languageHelper.questionArray[4] == 3)
    {
      if (Globals.Instance.displayHelper.drawInput.length -1 == 1)
      {
        if (
        Number(Globals.Instance.displayHelper.drawInput[0][1][0]) > Number(Globals.Instance.displayHelper.drawInput[0][1][Globals.Instance.displayHelper.drawInput[0][1].length-1]) - 25 &&
        Number(Globals.Instance.displayHelper.drawInput[0][1][0]) < Number(Globals.Instance.displayHelper.drawInput[0][1][Globals.Instance.displayHelper.drawInput[0][1].length-1]) + 25
        ){
          this.testDrawResult =  '一';     //Globals.Instance.languageHelper.question[0][0];
          if (this.testDrawResult == Globals.Instance.languageHelper.drawTarget) {
            Globals.Instance.languageHelper.matchIdentifier = "match";
            Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
          }
        }


      } /*else if (Globals.Instance.displayHelper.drawInput.length - 1 == 4) {

        if (
        1 == 1
        ){
          this.testDrawResult = '不';
          if (this.testDrawResult == Globals.Instance.languageHelper.drawTarget) {
            Globals.Instance.languageHelper.matchIdentifier = "match";
            Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
            Globals.Instance.inputHelper.dbAnswer = 1;
          }
        }
      } */ else if (Globals.Instance.displayHelper.drawInput.length - 1 == 6) {

        if (
        1 == 1
        ){
          this.testDrawResult = '好';
          if (this.testDrawResult == Globals.Instance.languageHelper.drawTarget) {
            Globals.Instance.languageHelper.matchIdentifier = "match";
            Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
            Globals.Instance.inputHelper.dbAnswer = 1;
          }
        }
      } else if (Globals.Instance.displayHelper.drawInput.length - 1 == 13) {

        if (
        1 == 1
        ){
          this.testDrawResult = '嗎';
          if (this.testDrawResult == Globals.Instance.languageHelper.drawTarget) {
            Globals.Instance.languageHelper.matchIdentifier = "match";
            Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
            Globals.Instance.inputHelper.dbAnswer = 1;
          }
        }
      }  else if (Globals.Instance.displayHelper.drawInput.length - 1 == 9) {

        if (
        1 == 1
        ){
          this.testDrawResult = '很';
          if (this.testDrawResult == Globals.Instance.languageHelper.drawTarget) {
            Globals.Instance.languageHelper.matchIdentifier = "match";
            Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
            Globals.Instance.inputHelper.dbAnswer = 1;
          }
        }
      }  else if (Globals.Instance.displayHelper.drawInput.length - 1 == 7) {

        if (
        Number(Globals.Instance.displayHelper.drawInput[1][1][0]) > Number(Globals.Instance.displayHelper.drawInput[1][1][Globals.Instance.displayHelper.drawInput[1][1].length-1]) - 25 &&
        Number(Globals.Instance.displayHelper.drawInput[1][1][0]) < Number(Globals.Instance.displayHelper.drawInput[1][1][Globals.Instance.displayHelper.drawInput[1][1].length-1]) + 25
        ){
          this.testDrawResult = '我';
          if (this.testDrawResult == Globals.Instance.languageHelper.drawTarget) {
            Globals.Instance.languageHelper.matchIdentifier = "match";
            Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
            Globals.Instance.inputHelper.dbAnswer = 1;
          }
        } else {
          this.testDrawResult = '你';
          if (this.testDrawResult == Globals.Instance.languageHelper.drawTarget) {
            Globals.Instance.languageHelper.matchIdentifier = "match";
            Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
            Globals.Instance.inputHelper.dbAnswer = 1;
          }
          }
      }  /*else if (Globals.Instance.displayHelper.drawInput.length - 1 == 7) {

        if (
        1 == 1
        ){
          this.testDrawResult = '你';
          if (this.testDrawResult == Globals.Instance.languageHelper.drawTarget) {
            Globals.Instance.languageHelper.matchIdentifier = "match";
            Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
          }
        }
      } */
    }
  }

  InputHelper.prototype.checkStrokeOne = function()
  {
  if (Globals.Instance.displayHelper.drawInput.length -1 == 1)
      {
        if (
        Number(Globals.Instance.displayHelper.drawInput[0][1][0]) > Number(Globals.Instance.displayHelper.drawInput[0][1][Globals.Instance.displayHelper.drawInput[0][1].length-1]) - 25 &&
        Number(Globals.Instance.displayHelper.drawInput[0][1][0]) < Number(Globals.Instance.displayHelper.drawInput[0][1][Globals.Instance.displayHelper.drawInput[0][1].length-1]) + 25
        ){
          this.testDrawResult =  '一';     //Globals.Instance.languageHelper.question[0][0];
          if (this.testDrawResult == Globals.Instance.languageHelper.drawTarget) {
            $.ajax({
            method: "POST",
            url: "/save_game_data",
            //data-remote:  "TRUE",
            data: {
              id: Globals.Instance.languageHelper.ajaxInput,
              attempt: 1
            }
            })
            Globals.Instance.languageHelper.matchIdentifier = "match";
            Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red";
            this.sendFailRecord = 1;
          }
        }
      }
  }

  this.InputHelper.prototype.checkStrokeFour = function()
  {
  if (Globals.Instance.displayHelper.drawInput.length - 1 == 4)
    {
      if (
        1==1
      )
      {
        this.testDrawResult = '不';
        if (this.testDrawResult == Globals.Instance.languageHelper.drawTarget) {
        $.ajax({
        method: "POST",
        url: "/save_game_data",
        //data-remote:  "TRUE",
        data: {
          id: Globals.Instance.languageHelper.ajaxInput,
          attempt: 1
        }
        })
        Globals.Instance.languageHelper.matchIdentifier = "match";
        Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red";
        this.sendFailRecord = 1;
        }
      }
    }
  }

  InputHelper.prototype.checkStrokeSix = function()
  {
    if (Globals.Instance.displayHelper.drawInput.length - 1 == 6)
    {
      if (1 == 1)
      {
        this.testDrawResult = '好';
        if (this.testDrawResult == Globals.Instance.languageHelper.drawTarget)
        {
          $.ajax({
          method: "POST",
          url: "/save_game_data",
          //data-remote:  "TRUE",
          data: {
            id: Globals.Instance.languageHelper.ajaxInput,
            attempt: 1
          }
          })
          Globals.Instance.languageHelper.matchIdentifier = "match";
          Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red";
          this.sendFailRecord = 1;
        }
      }
    }
  }

  InputHelper.prototype.checkStrokeNine = function()
  {
    if (Globals.Instance.displayHelper.drawInput.length - 1 == 9)
    {
      if (1 == 1)
      {
        this.testDrawResult = '很';
        if (this.testDrawResult == Globals.Instance.languageHelper.drawTarget)
        {
          $.ajax({
          method: "POST",
          url: "/save_game_data",
          //data-remote:  "TRUE",
          data: {
            id: Globals.Instance.languageHelper.ajaxInput,
            attempt: 1
          }
          })
          Globals.Instance.languageHelper.matchIdentifier = "match";
          Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red";
          this.sendFailRecord = 1;
        }
      }
    }
  }

  this.InputHelper.prototype.checkStrokeSeven = function()
  {
  if (Globals.Instance.displayHelper.drawInput.length - 1 == 7)
    {
      if (
        Number(Globals.Instance.displayHelper.drawInput[1][1][0]) > Number(Globals.Instance.displayHelper.drawInput[1][1][Globals.Instance.displayHelper.drawInput[1][1].length-1]) - 25 &&
        Number(Globals.Instance.displayHelper.drawInput[1][1][0]) < Number(Globals.Instance.displayHelper.drawInput[1][1][Globals.Instance.displayHelper.drawInput[1][1].length-1]) + 25
      )
      {
        this.testDrawResult = '我';
        if (this.testDrawResult == Globals.Instance.languageHelper.drawTarget) {
        $.ajax({
        method: "POST",
        url: "/save_game_data",
        //data-remote:  "TRUE",
        data: {
          id: Globals.Instance.languageHelper.ajaxInput,
          attempt: 1
        }
        })
        Globals.Instance.languageHelper.matchIdentifier = "match";
        Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red";
        this.sendFailRecord = 1;
        }
      }
    }
  }
  this.InputHelper.prototype.checkStrokeSevenA = function()
  {
  if (Globals.Instance.displayHelper.drawInput.length - 1 == 7)
    {
      if (
        1==1
      )
      {
        this.testDrawResult = '你';
        if (this.testDrawResult == Globals.Instance.languageHelper.drawTarget) {
        $.ajax({
        method: "POST",
        url: "/save_game_data",
        //data-remote:  "TRUE",
        data: {
          id: Globals.Instance.languageHelper.ajaxInput,
          attempt: 1
        }
        })
        Globals.Instance.languageHelper.matchIdentifier = "match";
        Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red";
        this.sendFailRecord = 1;
        }
      }
    }
  }

  this.InputHelper.prototype.checkStrokeThirteen = function()
  {
  if (Globals.Instance.displayHelper.drawInput.length - 1 == 13)
    {
      if (
        1==1
      )
      {
        this.testDrawResult = '嗎';
        if (this.testDrawResult == Globals.Instance.languageHelper.drawTarget) {
        $.ajax({
        method: "POST",
        url: "/save_game_data",
        //data-remote:  "TRUE",
        data: {
          id: Globals.Instance.languageHelper.ajaxInput,
          attempt: 1
        }
        })
        Globals.Instance.languageHelper.matchIdentifier = "match";
        Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red";
        this.sendFailRecord = 1;
        }
      }
    }
  }
  InputHelper.prototype.checkDrawingTouch = function()
  {
    if (Globals.Instance.languageHelper.questionArray[4] == 3)
    {
      if(this.checkStrokeOne()){}
      else if (this.checkStrokeFour()){}
      else if (this.checkStrokeSix()){}
      else if (this.checkStrokeSeven()){}
      else if (this.checkStrokeSevenA()){}
      else if (this.checkStrokeNine()){}
      else if (this.checkStrokeThirteen()){}
    }

    if (this.sendFailRecord == 0)
    {
      $.ajax({
      method: "POST",
      url: "/save_game_data",
      //data-remote:  "TRUE",
      data: {
        id: Globals.Instance.languageHelper.ajaxInput,
        attempt: 0
      }
      })
    } else {
      this.sendFailRecord = 0;
    }
  }



  InputHelper.prototype.checkAnswer = function()  // 2/16 9:41
  {
    Globals.Instance.languageHelper.ajaxInput = Globals.Instance.languageHelper.knowledgeKeyes[Globals.Instance.languageHelper.knowledgeAjaxKey][0];
    if(Globals.Instance.languageHelper.questionArray[4] != 3)
       {
      if //first answer box correct
      (
        this.mXcd >= 80 &&
        this.mXcd <= 230 &&
        this.mYcd >= 115 &&
        this.mYcd <= 150 &&
        Globals.Instance.languageHelper.question[0][1] == Globals.Instance.languageHelper.answer0[0][1]
      ) {
        Globals.Instance.inputHelper.dbAnswer = 1;
        $.ajax({
        method: "POST",
        url: "/save_game_data",
        //data-remote:  "TRUE",
        data: {
          id: Globals.Instance.languageHelper.ajaxInput,
          attempt: Globals.Instance.inputHelper.dbAnswer
        }
        })
        Globals.Instance.languageHelper.question.splice(0,1);
        Globals.Instance.languageHelper.answer0.splice(0,1);
        Globals.Instance.languageHelper.answer1.splice(0,1);
        Globals.Instance.languageHelper.answer2.splice(0,1);
        Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
        Globals.Instance.gameState = "playing";
      } else if //first answer box wrong
      (
        this.mXcd >= 80 &&
        this.mXcd <= 230 &&
        this.mYcd >= 115 &&
        this.mYcd <= 150 &&
        Globals.Instance.languageHelper.question[0][1] != Globals.Instance.languageHelper.answer0[0][1]
      ) {
        Globals.Instance.inputHelper.dbAnswer = 0;
        $.ajax({
        method: "POST",
        url: "/save_game_data",
        //data-remote:  "TRUE",
        data: {
          id: Globals.Instance.languageHelper.ajaxInput,
          attempt: Globals.Instance.inputHelper.dbAnswer
        }
        })
        Globals.Instance.languageHelper.question.splice(0,1);
        Globals.Instance.languageHelper.answer0.splice(0,1);
        Globals.Instance.languageHelper.answer1.splice(0,1);
        Globals.Instance.languageHelper.answer2.splice(0,1);
        //Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
        Globals.Instance.gameState = "playing";
      } else if //second answer box correct
      (
        this.mXcd >= 80 &&
        this.mXcd <= 230 &&
        this.mYcd >= 155 &&
        this.mYcd <= 190 &&
        Globals.Instance.languageHelper.question[0][1] == Globals.Instance.languageHelper.answer1[0][1]
      ) {
        Globals.Instance.inputHelper.dbAnswer = 1;
        $.ajax({
        method: "POST",
        url: "/save_game_data",
        //data-remote:  "TRUE",
        data: {
          id: Globals.Instance.languageHelper.ajaxInput,
          attempt: Globals.Instance.inputHelper.dbAnswer
        }
        })
        Globals.Instance.languageHelper.question.splice(0,1);
        Globals.Instance.languageHelper.answer0.splice(0,1);
        Globals.Instance.languageHelper.answer1.splice(0,1);
        Globals.Instance.languageHelper.answer2.splice(0,1);
        Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
        Globals.Instance.gameState = "playing";
      } else if //second answer box wrong
      (
        this.mXcd >= 80 &&
        this.mXcd <= 230 &&
        this.mYcd >= 155 &&
        this.mYcd <= 190 &&
        Globals.Instance.languageHelper.question[0][1] != Globals.Instance.languageHelper.answer1[0][1]
      ) {
        Globals.Instance.inputHelper.dbAnswer = 0;
        $.ajax({
        method: "POST",
        url: "/save_game_data",
        //data-remote:  "TRUE",
        data: {
          id: Globals.Instance.languageHelper.ajaxInput,
          attempt: Globals.Instance.inputHelper.dbAnswer
        }
        })
        Globals.Instance.languageHelper.question.splice(0,1);
        Globals.Instance.languageHelper.answer0.splice(0,1);
        Globals.Instance.languageHelper.answer1.splice(0,1);
        Globals.Instance.languageHelper.answer2.splice(0,1);
        //Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
        Globals.Instance.gameState = "playing";
      } else if //third answer box correct
      (
        this.mXcd >= 80 &&
        this.mXcd <= 230 &&
        this.mYcd >= 195 &&
        this.mYcd <= 220 &&
        Globals.Instance.languageHelper.question[0][1] == Globals.Instance.languageHelper.answer2[0][1]
      ) {
        Globals.Instance.inputHelper.dbAnswer = 1;
        $.ajax({
        method: "POST",
        url: "/save_game_data",
        //data-remote:  "TRUE",
        data: {
          id: Globals.Instance.languageHelper.ajaxInput,
          attempt: Globals.Instance.inputHelper.dbAnswer
        }
        })
        Globals.Instance.languageHelper.question.splice(0,1);
        Globals.Instance.languageHelper.answer0.splice(0,1);
        Globals.Instance.languageHelper.answer1.splice(0,1);
        Globals.Instance.languageHelper.answer2.splice(0,1);
        Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
        Globals.Instance.gameState = "playing";
      } else if //third answer box wrong
      (
        this.mXcd >= 80 &&
        this.mXcd <= 230 &&
        this.mYcd >= 195 &&
        this.mYcd <= 220 &&
        Globals.Instance.languageHelper.question[0][1] != Globals.Instance.languageHelper.answer2[0][1]
      ) {
        Globals.Instance.inputHelper.dbAnswer = 0;
        $.ajax({
        method: "POST",
        url: "/save_game_data",
        //data-remote:  "TRUE",
        data: {
          id: Globals.Instance.languageHelper.ajaxInput,
          attempt: Globals.Instance.inputHelper.dbAnswer
        }
        })
        Globals.Instance.languageHelper.question.splice(0,1);
        Globals.Instance.languageHelper.answer0.splice(0,1);
        Globals.Instance.languageHelper.answer1.splice(0,1);
        Globals.Instance.languageHelper.answer2.splice(0,1);
        //Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
        Globals.Instance.gameState = "playing";
      }
       } else if(Globals.Instance.languageHelper.questionArray[4] == 3)
        {
        if
        (
          this.mYcd >= 290 &&
          this.mYcd <= 335 &&
          this.mXcd >= 100 &&
          this.mXcd <= 220
        ){

          //check to see if drawn character matches question
          this.checkDrawing();




          Globals.Instance.languageHelper.question.splice(0,1);
          Globals.Instance.languageHelper.answer0.splice(0,1);
          Globals.Instance.languageHelper.answer1.splice(0,1);
          Globals.Instance.languageHelper.answer2.splice(0,1);
          Globals.Instance.gameState = "playing";

          for (i = Globals.Instance.displayHelper.drawInput.length; i > 0 ; i--) {
            Globals.Instance.displayHelper.drawInput.splice(i-1, 1);
          }

          for (i = Globals.Instance.languageHelper.questionArray.length; i > 0 ; i--) {
           Globals.Instance.languageHelper.questionArray.splice(i-1, 1);
          }

        }
      }

  }


InputHelper.prototype.checkAnswerTouch = function()  // 2/16 9:41
  {
    Globals.Instance.languageHelper.ajaxInput = Globals.Instance.languageHelper.knowledgeKeyes[Globals.Instance.languageHelper.knowledgeAjaxKey][0];
    if(Globals.Instance.languageHelper.questionArray[4] != 3)
       {
      if //first answer box correct
      (
        this.touchX >= 80 &&
        this.touchX <= 230 &&
        this.touchY >= 115 &&
        this.touchY <= 150 &&
        Globals.Instance.languageHelper.question[0][1] == Globals.Instance.languageHelper.answer0[0][1]
      ) {
        Globals.Instance.inputHelper.dbAnswer = 1;
        $.ajax({
        method: "POST",
        url: "/save_game_data",
        //data-remote:  "TRUE",
        data: {
          id: Globals.Instance.languageHelper.ajaxInput,
          attempt: Globals.Instance.inputHelper.dbAnswer
        }
        })
        Globals.Instance.languageHelper.question.splice(0,1);
        Globals.Instance.languageHelper.answer0.splice(0,1);
        Globals.Instance.languageHelper.answer1.splice(0,1);
        Globals.Instance.languageHelper.answer2.splice(0,1);
        Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
        Globals.Instance.gameState = "playing";
      } else if //first answer box wrong
      (
        this.touchX >= 80 &&
        this.touchX <= 230 &&
        this.touchY >= 115 &&
        this.touchY <= 150 &&
        Globals.Instance.languageHelper.question[0][1] != Globals.Instance.languageHelper.answer0[0][1]
      ) {
        Globals.Instance.inputHelper.dbAnswer = 0;
        $.ajax({
        method: "POST",
        url: "/save_game_data",
        //data-remote:  "TRUE",
        data: {
          id: Globals.Instance.languageHelper.ajaxInput,
          attempt: Globals.Instance.inputHelper.dbAnswer
        }
        })
        Globals.Instance.languageHelper.question.splice(0,1);
        Globals.Instance.languageHelper.answer0.splice(0,1);
        Globals.Instance.languageHelper.answer1.splice(0,1);
        Globals.Instance.languageHelper.answer2.splice(0,1);
        //Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
        Globals.Instance.gameState = "playing";
      } else if //second answer box correct
      (
        this.touchX >= 80 &&
        this.touchX <= 230 &&
        this.touchY >= 155 &&
        this.touchY <= 190 &&
        Globals.Instance.languageHelper.question[0][1] == Globals.Instance.languageHelper.answer1[0][1]
      ) {
        Globals.Instance.inputHelper.dbAnswer = 1;
        $.ajax({
        method: "POST",
        url: "/save_game_data",
        //data-remote:  "TRUE",
        data: {
          id: Globals.Instance.languageHelper.ajaxInput,
          attempt: Globals.Instance.inputHelper.dbAnswer
        }
        })
        Globals.Instance.languageHelper.question.splice(0,1);
        Globals.Instance.languageHelper.answer0.splice(0,1);
        Globals.Instance.languageHelper.answer1.splice(0,1);
        Globals.Instance.languageHelper.answer2.splice(0,1);
        Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
        Globals.Instance.gameState = "playing";
      } else if //second answer box wrong
      (
        this.touchX >= 80 &&
        this.touchX <= 230 &&
        this.touchY >= 155 &&
        this.touchY <= 190 &&
        Globals.Instance.languageHelper.question[0][1] != Globals.Instance.languageHelper.answer1[0][1]
      ) {
        Globals.Instance.inputHelper.dbAnswer = 0;
        $.ajax({
        method: "POST",
        url: "/save_game_data",
        //data-remote:  "TRUE",
        data: {
          id: Globals.Instance.languageHelper.ajaxInput,
          attempt: Globals.Instance.inputHelper.dbAnswer
        }
        })
        Globals.Instance.languageHelper.question.splice(0,1);
        Globals.Instance.languageHelper.answer0.splice(0,1);
        Globals.Instance.languageHelper.answer1.splice(0,1);
        Globals.Instance.languageHelper.answer2.splice(0,1);
        //Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
        Globals.Instance.gameState = "playing";
      } else if //third answer box correct
      (
        this.touchX >= 80 &&
        this.touchX <= 230 &&
        this.touchY >= 195 &&
        this.touchY <= 220 &&
        Globals.Instance.languageHelper.question[0][1] == Globals.Instance.languageHelper.answer2[0][1]
      ) {
        Globals.Instance.inputHelper.dbAnswer = 1;
        $.ajax({
        method: "POST",
        url: "/save_game_data",
        //data-remote:  "TRUE",
        data: {
          id: Globals.Instance.languageHelper.ajaxInput,
          attempt: Globals.Instance.inputHelper.dbAnswer
        }
        })
        Globals.Instance.languageHelper.question.splice(0,1);
        Globals.Instance.languageHelper.answer0.splice(0,1);
        Globals.Instance.languageHelper.answer1.splice(0,1);
        Globals.Instance.languageHelper.answer2.splice(0,1);
        Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
        Globals.Instance.gameState = "playing";
      } else if //third answer box wrong
      (
        this.touchX >= 80 &&
        this.touchX <= 230 &&
        this.touchY >= 195 &&
        this.touchY <= 220 &&
        Globals.Instance.languageHelper.question[0][1] != Globals.Instance.languageHelper.answer2[0][1]
      ) {
        Globals.Instance.inputHelper.dbAnswer = 0;
        $.ajax({
        method: "POST",
        url: "/save_game_data",
        //data-remote:  "TRUE",
        data: {
          id: Globals.Instance.languageHelper.ajaxInput,
          attempt: Globals.Instance.inputHelper.dbAnswer
        }
        })
        Globals.Instance.languageHelper.question.splice(0,1);
        Globals.Instance.languageHelper.answer0.splice(0,1);
        Globals.Instance.languageHelper.answer1.splice(0,1);
        Globals.Instance.languageHelper.answer2.splice(0,1);
        //Globals.Instance.map.cells[Globals.Instance.inputHelper.targetArray[1]].color = "Red"
        Globals.Instance.gameState = "playing";
      }
    } else if(Globals.Instance.languageHelper.questionArray[4] == 3)
        {
      if
      (
        this.touchY >= 290 &&
        this.touchY <= 335 &&
        this.touchX >= 100 &&
        this.touchX <= 220
      ){

        //check to see if drawn character matches question
        this.checkDrawingTouch();
        Globals.Instance.languageHelper.drawTarget = "apple"
        this.testDrawResult = "hippo";


        Globals.Instance.languageHelper.question.splice(0,1);
        Globals.Instance.languageHelper.answer0.splice(0,1);
        Globals.Instance.languageHelper.answer1.splice(0,1);
        Globals.Instance.languageHelper.answer2.splice(0,1);
        Globals.Instance.gameState = "playing";

        for (i = Globals.Instance.displayHelper.drawInput.length; i > 0 ; i--) {
          Globals.Instance.displayHelper.drawInput.splice(i-1, 1);
        }

        for (i = Globals.Instance.languageHelper.questionArray.length; i > 0 ; i--) {
          Globals.Instance.languageHelper.questionArray.splice(i-1, 1);
        }

      }
      }

  }

  InputHelper.prototype.CheckColor = function(array)
  {
    if (array[0] == 1 && Globals.Instance.map.cells[array[1]].color == "Red")
    {
      //Globals.Instance.languageHelper.returnQuestion();     // 2/15 9:29
      //Globals.Instance.gameState = "questionOn";      // 2/15 9:29
      if    // RIGHT WALL
      (
        (array[1]+1) % Globals.Instance.mapWidth == 0 &&
        array[1] > Globals.Instance.mapWidth -1 &&
        array[1] < Globals.Instance.mapWidth * Globals.Instance.mapHeight -1
      )
      {
        Globals.Instance.map.cells[array[1]-1].color = "Black";
        Globals.Instance.map.cells[array[1]].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth - 1].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth - 1].color = "Black";
        Globals.Instance.enemy.hp -= 6 * Globals.Instance.user.dmg;
      } else if     //LEFT WALL
      (
        (array[1]+1) % Globals.Instance.mapWidth == 1 &&
        array[1] > Globals.Instance.mapWidth -1 &&
        array[1] < Globals.Instance.mapWidth * (Globals.Instance.mapHeight - 1)
      )
      {
        Globals.Instance.map.cells[array[1]+1].color = "Black";
        Globals.Instance.map.cells[array[1]].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth + 1].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth + 1].color = "Black";
        Globals.Instance.enemy.hp -= 6 * Globals.Instance.user.dmg;
      } else if     //TOP WALL
      (
        //(array[1]+1) % Globals.Instance.mapWidth == 1 &&
        array[1] > 0 &&
        array[1] < Globals.Instance.mapWidth - 1
      )
      {
        Globals.Instance.map.cells[array[1]-1].color = "Black";
        Globals.Instance.map.cells[array[1]].color = "Black";
        Globals.Instance.map.cells[array[1]+1].color = "Black";
        //Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth].color = "Black";
        //Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth + 1].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth - 1].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth + 1].color = "Black";
        Globals.Instance.enemy.hp -= 6 * Globals.Instance.user.dmg;
      } else if     //BOTTOM WALL
      (
        //(array[1]+1) % Globals.Instance.mapWidth == 1 &&
        array[1] > Globals.Instance.mapWidth * (Globals.Instance.mapHeight - 1) &&
        array[1] < Globals.Instance.mapWidth * (Globals.Instance.mapHeight) -1
      )
      {
        Globals.Instance.map.cells[array[1]-1].color = "Black";
        Globals.Instance.map.cells[array[1]].color = "Black";
        Globals.Instance.map.cells[array[1]+1].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth + 1].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth - 1].color = "Black";
        //Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth].color = "Black";
        //Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth - 1].color = "Black";
        //Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth + 1].color = "Black";
        Globals.Instance.enemy.hp -= 6 * Globals.Instance.user.dmg;
      } else if     //MIDDLE
      (
        (array[1]+1) % Globals.Instance.mapWidth != 1 &&
        (array[1]+1) % Globals.Instance.mapWidth != 0 &&
        array[1] > Globals.Instance.mapWidth &&
        array[1] < Globals.Instance.mapWidth * ((Globals.Instance.mapHeight) -1)
      )
      {
        Globals.Instance.map.cells[array[1]-1].color = "Black";
        Globals.Instance.map.cells[array[1]].color = "Black";
        Globals.Instance.map.cells[array[1]+1].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth + 1].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth - 1].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth - 1].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth + 1].color = "Black";
        Globals.Instance.enemy.hp -= 9 * Globals.Instance.user.dmg;
      } else if     //TOP LEFT CORNER
      (
        array[1] == 0
      )
      {

        Globals.Instance.map.cells[array[1]].color = "Black";
        Globals.Instance.map.cells[array[1]+1].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth + 1].color = "Black";
        Globals.Instance.enemy.hp -= 4 * Globals.Instance.user.dmg;
      } else if     //TOP RIGHT CORNER
      (
        array[1] == Globals.Instance.map.tilesWide -1
      )
      {
        Globals.Instance.map.cells[array[1]-1].color = "Black";
        Globals.Instance.map.cells[array[1]].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.mapWidth - 1].color = "Black";
        Globals.Instance.enemy.hp -= 4 * Globals.Instance.user.dmg;
      } else if     //BOTTOM LEFT CORNER
      (
        array[1] == Globals.Instance.mapWidth * (Globals.Instance.mapHeight - 1)
      )
      {
        Globals.Instance.map.cells[array[1]].color = "Black";
        Globals.Instance.map.cells[array[1]+1].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth + 1].color = "Black";
        Globals.Instance.enemy.hp -= 4 * Globals.Instance.user.dmg;
      } else if     //BOTTOM RIGHT CORNER
      (
        array[1] == Globals.Instance.mapWidth * (Globals.Instance.mapHeight) -1
      )
      {
        Globals.Instance.map.cells[array[1]-1].color = "Black";
        Globals.Instance.map.cells[array[1]].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.mapWidth - 1].color = "Black";
        Globals.Instance.enemy.hp -= 4 * Globals.Instance.user.dmg;
      }
      this.arithmeticChecker = (array[1]+1) % Globals.Instance.map.tilesWide; // right wall, returns 0
      this.arithmeticChecker = (array[1]+1) % Globals.Instance.map.tilesWide; // left wall, returns 1
    }
  }

  InputHelper.prototype.DestroyEffect = function(array)
  {
    if (array[0] >= 5)
    {
      Globals.Instance.map.cells[array[1]].color = "Gray";
    }
  }

  InputHelper.prototype.CountArray = function(array)  //returns length of array and value of last index
  {
    if (Globals.Instance.gameState == "playing")
    {
      return [array.length, array[array.length-1]]
    }
  }

  InputHelper.prototype.ClearArray = function(array)
  {
    for (i = array.length; i > 0; i--)
    {
      array.splice(0,1);
    }
  }

  InputHelper.prototype.ResetBorder = function(array)
  {
    for (i = 0; i < this.arrayTracker.length; i++)
    {
      Globals.Instance.map.backgroundCells[array[i]].color = "Black";
    }
  }

  InputHelper.prototype.SetCellBlack = function(array)
  {
    if(this.arrayTracker.length > 2)
    {
      for (i = 0; i < this.arrayTracker.length; i++)
      {
        Globals.Instance.map.cells[array[i]].color = "Black";
        //Globals.Instance.enemy.hp--;
        Globals.Instance.enemy.hp -= Globals.Instance.user.dmg;
      }
    }
  }

  InputHelper.prototype.ReturnCell = function()
  {
  //beginning pt 1
    for (k = 0; k < Globals.Instance.mapWidth; k++)
    {
      for (l = 0; l < Globals.Instance.mapHeight; l ++)
      {
        if
        (
          this.mXcd > Globals.Instance.map.tilesHorizOffset + k * Globals.Instance.map.tilesSpacing &&
          this.mXcd < Globals.Instance.map.tilesHorizOffset + Globals.Instance.map.tileWidth + k * Globals.Instance.map.tilesSpacing &&
          this.mYcd > Globals.Instance.map.tilesVertOffset + l * Globals.Instance.map.tilesSpacing &&
          this.mYcd < Globals.Instance.map.tilesVertOffset + Globals.Instance.map.tileHeight + l * Globals.Instance.map.tilesSpacing
        )
        {
        this.testValue = Globals.Instance.mapWidth*l + k;  //possible error
        //Globals.Instance.map.cells[this.testValue].color = "Black";
        //Globals.Instance.map.backgroundCells[this.testValue].color = "Red";
        if
        (
          this.arrayTracker[this.arrayTracker.length - 1] != this.testValue &&
          this.arrayTracker.length == 0 &&
          Globals.Instance.gameState != "questionOn" &&
          Globals.Instance.languageHelper.questionArray[4] != 3
        )
        {
          this.arrayTracker.push(this.testValue);
          Globals.Instance.map.backgroundCells[this.testValue].color = "Red";

        } else if
        (
          this.arrayTracker.length != 0 &&
          this.arrayTracker[this.arrayTracker.length - 1] != this.testValue &&
          Globals.Instance.gameState != "questionOn" &&
          Globals.Instance.languageHelper.questionArray[4] != 3 &&
          Globals.Instance.map.cells[this.arrayTracker[this.arrayTracker.length-1]].color ==
          Globals.Instance.map.cells[this.testValue].color &&
          (
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] + 1 ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] - 1 ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] - Globals.Instance.map.tilesWide ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] - Globals.Instance.map.tilesWide - 1 ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] - Globals.Instance.map.tilesWide + 1 ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] + Globals.Instance.map.tilesWide ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] + Globals.Instance.map.tilesWide - 1 ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] + Globals.Instance.map.tilesWide +1
          )
          //Globals.Instance.map.cells[0].color == Globals.Instance.map.cells[1].color

        )
        {
          this.arrayTracker.push(this.testValue);
          Globals.Instance.map.backgroundCells[this.testValue].color = "Red";
          //this.arrayTracker = Globals.Instance.map.cells[this.arrayTracker[this.arrayTracker.length-1]].color;
        }
        }
      }
    }
//beginning pt 2
    for (k = 0; k < Globals.Instance.mapWidth; k++)
    {
      for (l = 0; l < Globals.Instance.mapHeight; l ++)
      {
        if
        (
          this.touchX > Globals.Instance.map.tilesHorizOffset + k * Globals.Instance.map.tilesSpacing &&
          this.touchX < Globals.Instance.map.tilesHorizOffset + Globals.Instance.map.tileWidth + k * Globals.Instance.map.tilesSpacing &&
          this.touchY > Globals.Instance.map.tilesVertOffset + l * Globals.Instance.map.tilesSpacing &&
          this.touchY < Globals.Instance.map.tilesVertOffset + Globals.Instance.map.tileHeight + l * Globals.Instance.map.tilesSpacing
        )
        {
        this.testValue = Globals.Instance.mapWidth*l + k;
        //Globals.Instance.map.cells[this.testValue].color = "Black";
        //Globals.Instance.map.backgroundCells[this.testValue].color = "Red";
        if
        (
          this.arrayTracker[this.arrayTracker.length - 1] != this.testValue &&
          this.arrayTracker.length == 0 &&
          Globals.Instance.languageHelper.questionArray[4] != 3
        )
        {
          this.arrayTracker.push(this.testValue);
          Globals.Instance.map.backgroundCells[this.testValue].color = "Red";
        } else if
        (
          this.arrayTracker.length != 0 &&
          this.arrayTracker[this.arrayTracker.length - 1] != this.testValue &&
          Globals.Instance.languageHelper.questionArray[4] != 3 &&
          Globals.Instance.map.cells[this.arrayTracker[this.arrayTracker.length-1]].color ==
          Globals.Instance.map.cells[this.testValue].color &&
          (
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] + 1 ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] - 1 ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] - Globals.Instance.map.tilesWide ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] - Globals.Instance.map.tilesWide - 1 ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] - Globals.Instance.map.tilesWide + 1 ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] + Globals.Instance.map.tilesWide ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] + Globals.Instance.map.tilesWide - 1 ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] + Globals.Instance.map.tilesWide +1
          )
          //Globals.Instance.map.cells[0].color == Globals.Instance.map.cells[1].color

        )
        {
          this.arrayTracker.push(this.testValue);
          Globals.Instance.map.backgroundCells[this.testValue].color = "Red";
          //this.arrayTracker = Globals.Instance.map.cells[this.arrayTracker[this.arrayTracker.length-1]].color;
        }
        }
      }
    }
  }

  InputHelper.prototype.timerFunction = function()
  {
    this.tileRemoverOn = true;
    this.ProcessEmpties();
  }

  InputHelper.prototype.ProcessEmpties = function()
  {
    this.blackProcessTest = true;
    MoveCells();

    function MoveCells()
    {
      //Globals.Instance.map.cells[32].color = "Black";
      for (i = 0; i < Globals.Instance.mapWidth * Globals.Instance.mapHeight; i ++)
      {
        if(Globals.Instance.map.cells[i].color == "Black")
        {
          for(j = 0; j <  1; j ++)
          {
            if(i-(j+1)*Globals.Instance.mapWidth < 0) {
            Globals.Instance.map.cells[i-j*Globals.Instance.mapWidth].color = ColorGen();
            }
            else {
            Globals.Instance.inputHelper.jCounter++;
            Globals.Instance.map.cells[i-j*Globals.Instance.mapWidth].color = Globals.Instance.map.cells[i-(j+1)*Globals.Instance.mapWidth].color;
            Globals.Instance.map.cells[i-(j+1)*Globals.Instance.mapWidth].color = "Black";
            }
          }
        }
      }
      //clearInterval(Globals.Instance.inputHelper.myVar2);   //KEEP FOR REF 12 21 2015
    }
  }
}

function Timer()
{
  this.startTime = Date.now();
  this.timeElapsed = 0;

  Timer.prototype.updateTimeElapsed = function()
  {
    this.timeElapsed = Date.now() - this.startTime;
  }
}

function Map(tilesWide, tilesDown, tileWidth, tileHeight)
{
  this.tilesWide = tilesWide;
  this.tilesDown = tilesDown;
  this.tileWidth = tileWidth;
  this.tileHeight = tileHeight;

  this.tilesVertOffset = 10;
  this.tilesHorizOffset = 10;
  this.tilesSpacing = 50;  // spacing from left most point

  this.cells = [];
  this.backgroundCells = [];

  var numberOfCells = tilesWide * tilesDown;

  for (var i = 0; i < numberOfCells; i ++)
  {
    this.cells.push(new Tile(ColorGen()));
  }
  for (var i = 0; i < numberOfCells; i ++)
  {
    this.backgroundCells.push(new Tile("Black"));
  }
}

function Tile(color)
{
  this.color = color;
}

function ColorGen()
{
  colors = ["Aqua", "Pink", "Yellow", "Orange"];
  index = Math.floor((Math.random() * colors.length));
  return(colors[index]);
}

function Enemy(hp)
{
  this.hp = hp;
}

function User()
{
  this.lvlDmgContr = 2; //contribution from user db
  this.knowDmgContr = 2; //contribution from user db
  this.dmg = this.lvlDmgContr + this.knowDmgContr;  //dps in practice would be dps contribution from lvl and knowledge
}

main();























</script>
    <a href="bejeweledHiragana.html">refresh</a>
