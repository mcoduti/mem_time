<head>
<style>
h1 {text-align:center;}
p {text-align:center;}
a {text-align:center;}
</style>

<br>
<p>
<a href="/">Back to home</a><br><a href="/game_page">Restart game</a><br><a href="/attempts">Knowledge unlocked</a>
</p>


<canvas id="game"></canvas>

    <style>
      *{ margin: 0px; padding: 0px; }
      canvas{ display: block; margin: 0px auto; border: 1px solid #000;}
    </style>



<script>
function main()
{
  //instantiate tiles
  //instantiate map
  //width = 5;
  width2 = 5;
  rand =  ColorGen();  //Math.floor(Math.random() * 3);

  window.requestAnimFrame = (function(){

  return window.requestAnimationFrame

  || window.webkitRequestAnimationFrame

  || window.mozRequestAnimationFrame

  || window.oRequestAnimationFrame

  || window.msRequestAnimationFrame

  || function( callback ){ return window.setTimeout(callback, FPS);
  };
  }

  )();


  Globals.Instance.initialize
  (
    1000
  );
}

function Loop()
{
  init = requestAnimFrame(Loop);

    if(Globals.Instance.inputHelper.buttonPressed == true)
    {
      Globals.Instance.inputHelper.ReturnCell();
    }
    Globals.Instance.gameTimer.updateTimeElapsed();
    Globals.Instance.displayHelper.clear();
    //Globals.Instance.displayHelper.drawInLoop();  //KEEP FOR REFERENCE
    Globals.Instance.displayHelper.writeText();
    Globals.Instance.displayHelper.drawCells();
}

function TileColor(color)
{
  this.color = color;
}

function DisplayHelper()
{
  this.width = 30;
  this.width2 = 30;
  this.canvas = document.getElementById("game");
}
{
  DisplayHelper.prototype.clear = function()
  {
    this.graphics.fillStyle = "White";
    this.graphics.fillRect
    (
      0, 0, 600, 600
    )
  }

  DisplayHelper.prototype.drawOnInterval = function()
  {
    Globals.Instance.displayHelper.clear();
    this.graphics.fillStyle = "LightGray";
    this.width = this.width + 1;
    this.graphics.fillRect
    (
      30,85, this.width ,30
    )

  }

  DisplayHelper.prototype.drawInLoop = function()
  {
    this.graphics.fillStyle = "LightGray";
    this.graphics.fillRect
    (
      30, 30, this.width2, 30
    )
    this.width2 = this.width2 + 1;
  }

  DisplayHelper.prototype.writeText = function()
  {
    this.graphics.fillStyle = "Black";
    this.graphics.font = '14px Calibri';
    //this.graphics.fillText(rand, 5, 15);
    //this.graphics.fillText("Counter: " + this.counter, 5, 30);
    //this.graphics.fillText("mXcd: " + Globals.Instance.inputHelper.mXcd, 5, 45);
    //this.graphics.fillText("mYcd: " + Globals.Instance.inputHelper.mYcd, 5, 60);
    //this.graphics.fillText("buttonPressed: " + Globals.Instance.inputHelper.buttonPressed, 5, 75);
    //this.graphics.fillText("testValue: " + Globals.Instance.inputHelper.testValue, 5, 90);
    //this.graphics.fillText("processBlackTest: " + Globals.Instance.inputHelper.blackProcessTest, 150, 90);
    //this.graphics.fillText("Globals.Instance.testCounter: " + Globals.Instance.testCounter, 150, 75);
    //this.graphics.fillText("Globals.Instance.inputHelper.checkingCounter: " + Globals.Instance.inputHelper.checkingCounter, 150, 60);
    //this.graphics.fillText("Globals.Instance.inputHelper.checkingCounter: " + Globals.Instance.inputHelper.checkingCounter2, 150, 45);
    //this.graphics.fillText("Globals.Instance.inputHelper.arithmeticChecker: " + Globals.Instance.inputHelper.arithmeticChecker, 150, 30);
    //this.graphics.fillText("Globals.Instance.inputHelper.tilerRemoverOn: " + Globals.Instance.inputHelper.tileRemoverOn, 150, 15);
    //this.graphics.fillText("Globals.Instance.inputHelper.destroyedArray: " + Globals.Instance.inputHelper.destroyedArray, 150, 105);
    //this.graphics.fillText("Globals.Instance.inputHelper.jCounter: " + Globals.Instance.inputHelper.jCounter, 150, 120);
    //this.graphics.fillText("Globals.Instance.inputHelper.arrayTracker: " + Globals.Instance.inputHelper.arrayTracker, 10, 135);
    //this.graphics.fillText("Globals.Instance.gameTimer.startTime: " + Globals.Instance.gameTimer.startTime, 10, 150);
    this.graphics.fillText("Globals.Instance.gameTimer.startTime: " + Globals.Instance.gameTimer.timeElapsed, 10, 165);
    this.graphics.fillText("Globals.Instance.enemy.hp: " + Globals.Instance.enemy.hp, 10, 180);
  }

  DisplayHelper.prototype.drawCells = function()
  {

    for (i = 0; i < Globals.Instance.map.tilesWide; i ++)
    {
      for(j = 0; j < Globals.Instance.map.tilesDown; j++)
      {
        this.graphics.fillStyle = Globals.Instance.map.backgroundCells[i+10*j].color;
        this.graphics.fillRect
        (
          Globals.Instance.map.tilesHorizOffset -4 + i * Globals.Instance.map.tilesSpacing,
          Globals.Instance.map.tilesVertOffset - 4 + j * Globals.Instance.map.tilesSpacing,
          Globals.Instance.map.tileWidth + 8 ,
          Globals.Instance.map.tileHeight + 8
        )
        this.counter++;
      }
    }

    this.counter = 0;
    for (i = 0; i < Globals.Instance.map.tilesWide; i ++)
    {
      for(j = 0; j < Globals.Instance.map.tilesDown; j++)
      {
        this.graphics.fillStyle = Globals.Instance.map.cells[i+10*j].color;
        this.graphics.fillRect
        (
          Globals.Instance.map.tilesHorizOffset + i * Globals.Instance.map.tilesSpacing,
          Globals.Instance.map.tilesVertOffset + j * Globals.Instance.map.tilesSpacing,
          Globals.Instance.map.tileWidth,
          Globals.Instance.map.tileHeight
        )
        this.counter++;
      }
    }
  }

  DisplayHelper.prototype.initialize = function()
  {
    this.canvas.width = 225;
    this.canvas.height = 200;
    this.tomato = "tomatoooos";
    this.graphics = this.canvas.getContext("2d");
    this.graphics.fillStyle = "LightGray";
  }

}

function Globals()
{}
{
  Globals.Instance = new Globals();

  Globals.prototype.initialize = function
  (
    millisecondsPerTimerTick
  )
  {
    this.inputHelper = new InputHelper();
    this.inputHelper.initialize();
    this.testCounter = 0;
    this.enemy = new Enemy(100);

    this.displayHelper = new DisplayHelper();
    this.displayHelper.initialize();
    this.gameTimer = new Timer();

    this.map = new Map(10,10,21,21);

    this.myVar = setInterval
    (
      this.handleEventTimerTick.bind(this),
      millisecondsPerTimerTick
    );

    Loop();

  }

  Globals.prototype.handleEventTimerTick = function()     //KEEP FOR REFERENCE
  {
    //Globals.Instance.displayHelper.drawOnInterval();
    //Loop();
    //Globals.Instance.map.cells[this.testCounter].color = "Black";
    //this.testCounter = this.testCounter + 1;
    //clearInterval(this.myVar);
  }

}

function InputHelper()
{
this.buttonPressed = false;
this.testValue = false;
this.blackProcessTest = false;
this.checkingCounter = 9;
this.checkingCounter2 = 0;
this.countOfNonBlackCells = 0;
this.arithmeticChecker = "celery";
this.tileRemoverOn = false;
this.offset = "hello";
this.destroyedArray = [];
this.jCounter = 0;
this.arrayTracker = [];
}
{
  InputHelper.prototype.initialize = function()
  {
    this.mXcd = 0;
    this.mYcd = 0;

    window.addEventListener("mousedown", this.OnClick.bind(this), true);
    window.addEventListener("mouseup", this.OnRelease.bind(this), true);
    document.getElementById("game").addEventListener("mousemove", this.MouseMove.bind(this), true);
  }

  InputHelper.prototype.OnClick = function()
  {
    this.buttonPressed = true;
    this.countOfNonBlackCells = 0;
    clearInterval(Globals.Instance.inputHelper.myVar2);
    this.tileRemoverOn = false;
  }

  InputHelper.prototype.OnRelease = function()
  {
    this.buttonPressed = false;
    this.ResetBorder(this.arrayTracker);
    this.SetCellBlack(this.arrayTracker);
    this.destroyedArray = this.CountArray(this.arrayTracker);
    this.DestroyEffect(this.destroyedArray);
    this.CheckColor(this.destroyedArray);

    this.ClearArray(this.arrayTracker);
    this.ProcessEmpties();

    if(this.tileRemoverOn == false)
    {
      this.myVar2 = setInterval
      (
        this.timerFunction.bind(this),
        300
      )
    }
  }

  InputHelper.prototype.CheckColor = function(array)
  {
    if (array[0] == 1 && Globals.Instance.map.cells[array[1]].color == "Red")
    {

      if    // RIGHT WALL
      (
        (array[1]+1) % Globals.Instance.map.tilesWide == 0 &&
        array[1] > Globals.Instance.map.tilesWide -1 &&
        array[1] < Globals.Instance.map.tilesWide * Globals.Instance.map.tilesDown -1
      )
      {
        Globals.Instance.map.cells[array[1]-1].color = "Black";
        Globals.Instance.map.cells[array[1]].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.map.tilesDown].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.map.tilesDown - 1].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.map.tilesDown].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.map.tilesDown - 1].color = "Black";
        Globals.Instance.enemy.hp -= 6;
      } else if     //LEFT WALL
      (
        (array[1]+1) % Globals.Instance.map.tilesWide == 1 &&
        array[1] > Globals.Instance.map.tilesWide -1 &&
        array[1] < Globals.Instance.map.tilesWide * (Globals.Instance.map.tilesDown - 1)
      )
      {
        Globals.Instance.map.cells[array[1]+1].color = "Black";
        Globals.Instance.map.cells[array[1]].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.map.tilesDown].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.map.tilesDown + 1].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.map.tilesDown].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.map.tilesDown + 1].color = "Black";
        Globals.Instance.enemy.hp -= 6;
      } else if     //TOP WALL
      (
        //(array[1]+1) % Globals.Instance.map.tilesWide == 1 &&
        array[1] > 0 &&
        array[1] < Globals.Instance.map.tilesWide - 1
      )
      {
        Globals.Instance.map.cells[array[1]-1].color = "Black";
        Globals.Instance.map.cells[array[1]].color = "Black";
        Globals.Instance.map.cells[array[1]+1].color = "Black";
        //Globals.Instance.map.cells[array[1] - Globals.Instance.map.tilesDown].color = "Black";
        //Globals.Instance.map.cells[array[1] - Globals.Instance.map.tilesDown + 1].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.map.tilesDown].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.map.tilesDown - 1].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.map.tilesDown + 1].color = "Black";
        Globals.Instance.enemy.hp -= 6;
      } else if     //BOTTOM WALL
      (
        //(array[1]+1) % Globals.Instance.map.tilesWide == 1 &&
        array[1] > Globals.Instance.map.tilesWide * (Globals.Instance.map.tilesDown - 1) &&
        array[1] < Globals.Instance.map.tilesWide * (Globals.Instance.map.tilesDown) -1
      )
      {
        Globals.Instance.map.cells[array[1]-1].color = "Black";
        Globals.Instance.map.cells[array[1]].color = "Black";
        Globals.Instance.map.cells[array[1]+1].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.map.tilesDown].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.map.tilesDown + 1].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.map.tilesDown - 1].color = "Black";
        //Globals.Instance.map.cells[array[1] + Globals.Instance.map.tilesDown].color = "Black";
        //Globals.Instance.map.cells[array[1] + Globals.Instance.map.tilesDown - 1].color = "Black";
        //Globals.Instance.map.cells[array[1] + Globals.Instance.map.tilesDown + 1].color = "Black";
        Globals.Instance.enemy.hp -= 6;
      } else if     //MIDDLE
      (
        (array[1]+1) % Globals.Instance.map.tilesWide != 1 &&
        (array[1]+1) % Globals.Instance.map.tilesWide != 0 &&
        array[1] > Globals.Instance.map.tilesWide &&
        array[1] < Globals.Instance.map.tilesWide * ((Globals.Instance.map.tilesDown) -1)
      )
      {
        Globals.Instance.map.cells[array[1]-1].color = "Black";
        Globals.Instance.map.cells[array[1]].color = "Black";
        Globals.Instance.map.cells[array[1]+1].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.map.tilesDown].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.map.tilesDown + 1].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.map.tilesDown - 1].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.map.tilesDown].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.map.tilesDown - 1].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.map.tilesDown + 1].color = "Black";
        Globals.Instance.enemy.hp -= 9;
      } else if     //TOP LEFT CORNER
      (
        array[1] == 0
      )
      {
        //Globals.Instance.map.cells[array[1]-1].color = "Black";
        Globals.Instance.map.cells[array[1]].color = "Black";
        Globals.Instance.map.cells[array[1]+1].color = "Black";
        //Globals.Instance.map.cells[array[1] - Globals.Instance.map.tilesDown].color = "Black";
        //Globals.Instance.map.cells[array[1] - Globals.Instance.map.tilesDown + 1].color = "Black";
        //Globals.Instance.map.cells[array[1] - Globals.Instance.map.tilesDown - 1].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.map.tilesDown].color = "Black";
        //Globals.Instance.map.cells[array[1] + Globals.Instance.map.tilesDown - 1].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.map.tilesDown + 1].color = "Black";
        Globals.Instance.enemy.hp -= 4;
      } else if     //BOTTOM LEFT CORNER
      (
        array[1] == Globals.Instance.map.tilesWide -1
      )
      {
        Globals.Instance.map.cells[array[1]-1].color = "Black";
        Globals.Instance.map.cells[array[1]].color = "Black";
        //Globals.Instance.map.cells[array[1]+1].color = "Black";
        //Globals.Instance.map.cells[array[1] - Globals.Instance.map.tilesDown].color = "Black";
        //Globals.Instance.map.cells[array[1] - Globals.Instance.map.tilesDown + 1].color = "Black";
        //Globals.Instance.map.cells[array[1] - Globals.Instance.map.tilesDown - 1].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.map.tilesDown].color = "Black";
        Globals.Instance.map.cells[array[1] + Globals.Instance.map.tilesDown - 1].color = "Black";
        //Globals.Instance.map.cells[array[1] + Globals.Instance.map.tilesDown + 1].color = "Black";
        Globals.Instance.enemy.hp -= 4;
      } else if     //BOTTOM LEFT CORNER
      (
        array[1] == Globals.Instance.map.tilesWide * (Globals.Instance.map.tilesDown - 1)
      )
      {
        //Globals.Instance.map.cells[array[1]-1].color = "Black";
        Globals.Instance.map.cells[array[1]].color = "Black";
        Globals.Instance.map.cells[array[1]+1].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.map.tilesDown].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.map.tilesDown + 1].color = "Black";
        //Globals.Instance.map.cells[array[1] - Globals.Instance.map.tilesDown - 1].color = "Black";
        //Globals.Instance.map.cells[array[1] + Globals.Instance.map.tilesDown].color = "Black";
        //Globals.Instance.map.cells[array[1] + Globals.Instance.map.tilesDown - 1].color = "Black";
        //Globals.Instance.map.cells[array[1] + Globals.Instance.map.tilesDown + 1].color = "Black";
        Globals.Instance.enemy.hp -= 4;
      } else if     //BOTTOM RIGHT CORNER
      (
        array[1] == Globals.Instance.map.tilesWide * (Globals.Instance.map.tilesDown) -1
      )
      {
        Globals.Instance.map.cells[array[1]-1].color = "Black";
        Globals.Instance.map.cells[array[1]].color = "Black";
        //Globals.Instance.map.cells[array[1]+1].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.map.tilesDown].color = "Black";
        //Globals.Instance.map.cells[array[1] - Globals.Instance.map.tilesDown + 1].color = "Black";
        Globals.Instance.map.cells[array[1] - Globals.Instance.map.tilesDown - 1].color = "Black";
        //Globals.Instance.map.cells[array[1] + Globals.Instance.map.tilesDown].color = "Black";
        //Globals.Instance.map.cells[array[1] + Globals.Instance.map.tilesDown - 1].color = "Black";
        //Globals.Instance.map.cells[array[1] + Globals.Instance.map.tilesDown + 1].color = "Black";
        Globals.Instance.enemy.hp -= 4;
      }
      this.arithmeticChecker = (array[1]+1) % Globals.Instance.map.tilesWide; // right wall, returns 0
      this.arithmeticChecker = (array[1]+1) % Globals.Instance.map.tilesWide; // left wall, returns 1
    }
  }

  InputHelper.prototype.DestroyEffect = function(array)
  {
    if (array[0] >= 5)
    {
      Globals.Instance.map.cells[array[1]].color = "Red";
    }
  }

  InputHelper.prototype.CountArray = function(array)
  {
    return [array.length, array[array.length-1]]
  }

  InputHelper.prototype.ClearArray = function(array)
  {
    for (i = array.length; i > 0; i--)
    {
      array.splice(0,1);
    }
  }

  InputHelper.prototype.ResetBorder = function(array)
  {
    for (i = 0; i < this.arrayTracker.length; i++)
    {
      Globals.Instance.map.backgroundCells[array[i]].color = "Black";
    }
  }

  InputHelper.prototype.SetCellBlack = function(array)
  {
    if(this.arrayTracker.length > 2)
    {
      for (i = 0; i < this.arrayTracker.length; i++)
      {
        Globals.Instance.map.cells[array[i]].color = "Black";
        Globals.Instance.enemy.hp--;
      }
    }
  }

  InputHelper.prototype.ReturnCell = function()
  {
    for (k = 0; k < 10; k++)
    {
      for (l = 0; l < 10; l ++)
      {
        if
        (
          this.mXcd > Globals.Instance.map.tilesHorizOffset + k * Globals.Instance.map.tilesSpacing &&
          this.mXcd < Globals.Instance.map.tilesHorizOffset + Globals.Instance.map.tileWidth + k * Globals.Instance.map.tilesSpacing &&
          this.mYcd > Globals.Instance.map.tilesVertOffset + l * Globals.Instance.map.tilesSpacing &&
          this.mYcd < Globals.Instance.map.tilesVertOffset + Globals.Instance.map.tileHeight + l * Globals.Instance.map.tilesSpacing
        )
        {
        this.testValue = 10*l + k;
        //Globals.Instance.map.cells[this.testValue].color = "Black";
        //Globals.Instance.map.backgroundCells[this.testValue].color = "Red";
        if
        (
          this.arrayTracker[this.arrayTracker.length - 1] != this.testValue &&
          this.arrayTracker.length == 0
        )
        {
          this.arrayTracker.push(this.testValue);
          Globals.Instance.map.backgroundCells[this.testValue].color = "Red";
        } else if
        (
          this.arrayTracker.length != 0 &&
          this.arrayTracker[this.arrayTracker.length - 1] != this.testValue &&
          Globals.Instance.map.cells[this.arrayTracker[this.arrayTracker.length-1]].color ==
          Globals.Instance.map.cells[this.testValue].color &&
          (
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] + 1 ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] - 1 ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] - Globals.Instance.map.tilesWide ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] - Globals.Instance.map.tilesWide - 1 ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] - Globals.Instance.map.tilesWide + 1 ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] + Globals.Instance.map.tilesWide ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] + Globals.Instance.map.tilesWide - 1 ||
          this.testValue == this.arrayTracker[this.arrayTracker.length - 1] + Globals.Instance.map.tilesWide +1
          )
          //Globals.Instance.map.cells[0].color == Globals.Instance.map.cells[1].color

        )
        {
          this.arrayTracker.push(this.testValue);
          Globals.Instance.map.backgroundCells[this.testValue].color = "Red";
          //this.arrayTracker = Globals.Instance.map.cells[this.arrayTracker[this.arrayTracker.length-1]].color;
        }
        }
      }
    }
  }

  InputHelper.prototype.MouseMove = function(e){
    e = e || window.event;
    var target = e.target || e.srcElement;
    var rect = target.getBoundingClientRect();
    this.mXcd = e.clientX - rect.left;
    this.mYcd = e.clientY - rect.top;
  }

  InputHelper.prototype.timerFunction = function()
  {
    this.tileRemoverOn = true;
    this.ProcessEmpties();
  }

  InputHelper.prototype.ProcessEmpties = function()
  {
    this.blackProcessTest = true;
    MoveCells();

    function MoveCells()
    {
      //Globals.Instance.map.cells[32].color = "Black";
      for (i = 0; i < 100; i ++)
      {
        if(Globals.Instance.map.cells[i].color == "Black")
        {
          for(j = 0; j <  1 /*Math.floor(i/10)*/; j ++)
          {
            if(i-(j+1)*10 < 0) {
            Globals.Instance.map.cells[i-j*10].color = ColorGen();
            }
            else {
            Globals.Instance.inputHelper.jCounter++;
            Globals.Instance.map.cells[i-j*10].color = Globals.Instance.map.cells[i-(j+1)*10].color;
            Globals.Instance.map.cells[i-(j+1)*10].color = "Black";
            }
          }
        }


      }
      //clearInterval(Globals.Instance.inputHelper.myVar2);   //KEEP FOR REF 12 21 2015
    }
  }

}

function Timer()
{
  this.startTime = Date.now();
  this.timeElapsed = 0;

  Timer.prototype.updateTimeElapsed = function()
  {
    this.timeElapsed = Date.now() - this.startTime;
  }
}

function Map(tilesWide, tilesDown, tileWidth, tileHeight)
{
  this.tilesWide = tilesWide;
  this.tilesDown = tilesDown;
  this.tileWidth = tileWidth;
  this.tileHeight = tileHeight;

  this.tilesVertOffset = 10;
  this.tilesHorizOffset = 10;
  this.tilesSpacing = 30;  // spacing from left most point

  this.cells = [];
  this.backgroundCells = [];

  var numberOfCells = tilesWide * tilesDown;

  for (var i = 0; i < numberOfCells; i ++)
  {
    this.cells.push(new Tile(ColorGen()));
  }
  for (var i = 0; i < numberOfCells; i ++)
  {
    this.backgroundCells.push(new Tile("Black"));
  }
}

function Tile(color)
{
  this.color = color;
}

function ColorGen()
{
  colors = ["Aqua", "Pink", "Yellow", "Orange"];
  index = Math.floor((Math.random() * colors.length));
  return(colors[index]);
}

function Enemy(hp)
{
  this.hp = hp;
}

main();

























</script>
</head>



</body>
